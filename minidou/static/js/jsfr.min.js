var jsfr_initialize = function(f, l, j) {
	var r = 1;
	var g = 50;
	var q = 0;
	if (j != undefined) {
		if (j.size != undefined) {
			r = j.size
		}
		if (j.speed != undefined) {
			g = j.speed
		}
		if (j.gravity != undefined) {
			q = j.gravity
		}
	}
	var d = r * r;
	var e = 10000;
	var p = 800;
	var o = 0.000001;
	var a = new Array();
	if (j != undefined && j.radius != undefined) {
		for (var m = 0; m < f; m++) {
			a.push([Math.random() * r, Math.random() * r, 0, 0, j.radius[m], 0])
		}
	} else {
		for (var m = 0; m < f; m++) {
			a.push([Math.random() * r, Math.random() * r, 0, 0, 1, 0])
		}
	}
	var c = Math.sqrt(e * d) / 10;
	var h = Math.sqrt(e * d) / (1 + f);
	if (j.k) {
		h = j.k
	}
	var b = {
		k: h,
		size: r,
		speed: g,
		gravity: q,
		area: d,
		AREA_MULTIPLICATOR: e,
		SPEED_DIVISOR: p,
		epsilon: o,
		nodes: a,
		edges: l,
		append: function(i, k) {
			if (i == undefined) {
				i = Math.random() * this.size
			}
			if (k == undefined) {
				k = Math.random() * this.size
			}
			this.nodes.push([i + Math.random() - 0.5, k + Math.random() - 0.5, 0, 0, 0, 0])
		},
		iterate: function(M) {
			var y = this.size;
			var G = this.speed;
			var t = this.gravity;
			var I = this.area;
			var H = this.f;
			var u = this.AREA_MULTIPLICATOR;
			var O = this.SPEED_DIVISOR;
			var P = this.epsilon;
			var B = this.nodes;
			var s = this.edges;
			var C = this.k;
			var A = B.length;
			for (var F = 0; F < A; F++) {
				B[F][2] = 0;
				B[F][3] = 0
			}
			for (var F = 0; F < A; F++) {
				for (var E = 0; E < A; E++) {
					if (F == E) {
						continue
					}
					var w = B[F][0] - B[E][0];
					var v = B[F][1] - B[E][1];
					var L = Math.sqrt(w * w + v * v);
					if (L < B[F][4] + B[E][4]) {
						L *= Math.exp(L - (B[F][4] + B[E][4]))
					}
					if (L < P) {
						L = P
					}
					var H = C * C / L;
					B[F][2] += w / L * H;
					B[F][3] += v / L * H
				}
			}
			for (var J = 0; J < s.length; J++) {
				var F = s[J][0];
				var E = s[J][1];
				var w = B[F][0] - B[E][0];
				var v = B[F][1] - B[E][1];
				var L = Math.sqrt(w * w + v * v);
				if (L < P) {
					L = P
				}
				var H = (L * L) / C;
				w = (w / L) * H;
				v = (v / L) * H;
				B[F][2] -= w;
				B[F][3] -= v;
				B[E][2] += w;
				B[E][3] += v
			}
			for (var F = 0; F < A; F++) {
				B[F][2] *= G / O;
				B[F][3] *= G / O
			}
			for (var F = 0; F < A; F++) {
				if (B[F][5]) {
					continue
				}
				var z = B[F][2];
				var x = B[F][3];
				var L = Math.sqrt(z * z + x * x);
				if (L < P) {
					L = P
				}
				var D = Math.min(c * (G / O), L);
				var w = z / L * D;
				var v = x / L * D;
				var N = B[F][0] + w;
				var K = B[F][1] + v;
				B[F][0] = N;
				B[F][1] = K
			}
		}
	};
	return b
};
var jsfr_run = function(d, a, c) {
	ctx = jsfr_initialize(d, a, c);
	for (var b = 0; b < d * 2; b++) {
		ctx.iterate()
	}
	return ctx.nodes
};