$(document).ready(function() {
	var b = {
		black: {
			mark_color: "black",
			plot_stroke: "white",
			plot_fill: "rgba(255,255,255,0.5)",//fill blow the stroke
			time_fill: "white",
			time_shadow: "darkgray",
			range_stroke: "rgba(31,119,180,0.8)",
			range_fill: "rgba(31,119,180,0.2)",
			tracking_stroke: "rgba(31,119,180,1)",
			tracking_fill: "rgba(31,119,180,0.3)",
			current_line: "white"
		},
		white: {
			mark_color: "gray",
			plot_stroke: "white",
			plot_fill: "rgba(255,255,255,0.3)",
			time_fill: "white",
			range_stroke: "rgba(255,255,255,0.7)",
			range_fill: "rgba(255,255,255,0.1)",
			tracking_stroke: "rgba(255,255,255,1)",
			tracking_fill: "rgba(255,255,255,0.3)",
			current_line: "white"
		}
	};
	var a = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
	var c = function(f) {
		var e = f.toString();
		while (e.length < 2) {
			e = "0" + e
		}
		return e
	};
	var d = function(e) {
		return a[e.getMonth()] + " " + e.getDate() + ", " + e.getFullYear() + " " + c(e.getHours()) + ":" + c(e.getMinutes())
	};
	$(".pkuvis-timeline").each(function() {
		var u = this;
		//stroke_height
		var n = 100;
		var e = false;
		//color_scheme
		var i = b.white;
		var k = {
			track_range: true
		};
		var j = false;
		$(this).children("span").hide();
		// $(this).children("span.set-height").each(function() {
		// 	n = $(this).html()
		// });
		// $(this).children("span.set-colorscheme").each(function() {
		// 	i = b[$(this).html()]
		// });
		$(this).children("span.enable-yticks").each(function() {
			e = true
		});
		$(this).children("span.disable-track-range").each(function() {
			k.track_range = false
		});
		$(this).children("span.window-width").each(function() {
			j = true
		});
		$(this).css("height", (n + 20) + "px");
		$(this).css("cursor", "crosshair");
		$(this).append('<canvas class="graph"></canvas>');
		var f = $(this).children(".graph")[0];
		if (j) {
			f.width = $(window).width()
		} else {
			f.width = $(u).width()
		}
		f.height = n + 20;
		var ctx = f.getContext("2d");
		this.timeline_canvas = f;
		this.timeline_data = undefined;
		var q = function(w) {
			var y = u.timeline_data;
			if (y == undefined) {
				return 0
			}
			var z = f.width;
			var B = y.start;
			var A = y.end;
			return (w - 10) / (z - 20) * (A - B) + B
		};
		var m = function(x) {
			var w = u.timeline_data;
			if (w == undefined) {
				return 0
			}
			var y = f.width;
			var A = w.start;
			var z = w.end;
			return (x - A) / (z - A) * (y - 20) + 10
		};
		var l = false;
		var p = 0;
		var o = 0;
		var g = undefined;
		var v = function(x, w) {
			if (u[x] != undefined) {
				u[x](w)
			}
		};
		var s = "left";
		var h = false;
		this.redraw = function(ab, L) {
			g = [ab, L];
			ctx.clearRect(0, 0, f.width, f.height);
			ctx.font = "12px Helvetica";
			var timeline_data = u.timeline_data;
			if (timeline_data == undefined) {
				return
			}
			var start_time = timeline_data.start;
			var end_time = timeline_data.end;
			//var V = new Date(start_time * 1000);
			//V.setHours(12);
			//V.setMinutes(0);
			//V.setSeconds(0);
			var time = start_time;//V.getTime() / 1000 - 3600 * 24;
			var timeline_width = f.width;
			var timeline_height = f.height - 32;
			var S = 1;
			var ac = 0;
			//map time to x axis
			var counter = 0;
			var tmap = function(t) {
				a[t].number = counter++;
				var children = a[t].children.sort(function(j, i) {
					return a[j].t - a[i].t
				});
				for (var i in children) {
					tmap(children[i])
				}
			};
			//left of the polyline
			var get_x_offset = function(ae) {
				return (ae - start_time) / (end_time - start_time) * (timeline_width - 20) + 10
			};
			var W = function(ae) {
				return (ae - 10) / (timeline_width - 20) * (end_time - start_time) + start_time
			};
			if (ab != undefined) {
				var x = function(ae) {
					return (Math.exp(ae) - Math.exp(-ae)) / (Math.exp(ae) + Math.exp(-ae))
				};
				var R = 30;
				if (L != undefined) {
					R = L * L * 30
				}
				if (R > 60) {
					R = 60
				}
				var w = function(ae) {
					return ae + R * x(ae / 5) * Math.exp(-ae * ae / 100 / R)
				};
				if (h) {
					w = function(ae) {
						return ae + R * ae / 5
					}
				}
				I = function(af) {
					var ae = (af - start_time) / (end_time - start_time) * (timeline_width - 20) + 10;
					ae = ab + 3 * w((ae - ab) / 3);
					return ae
				}
			}
			var F = function(ae) {
				return timeline_height - ae * S
			};
			var N = (end_time - start_time) / ((timeline_width - 20) / 2);
			var A = [
				[1, 10],
				[5, 6],
				[10, 6],
				[20, 3],
				[60, 6],
				[360, 4],
				[720, 14],
				[1440, 7],
				[1440 * 7, 4]
			];
			var K = 1440 * 30 * 60,
				Q = 4;
			for (var T in A) {
				if (A[T][0] * 60 > N) {
					K = A[T][0] * 60;
					Q = A[T][1];
					break
				}
			}
			if (s == "left") {
				if (ab > timeline_width * 0.6666) {
					s = "right"
				}
			} else {
				if (ab < timeline_width * 0.3333) {
					s = "left"
				}
			}
			var plot_line = function(al, ao) {
				ctx.strokeStyle = i.mark_color;
				var af = 0;
				current_time = time;
				ctx.strokeStyle = i.plot_stroke;
				ctx.fillStyle = i.plot_fill;
				//draw axises
				while (current_time < end_time) {
					if (current_time >= start_time) {
						ctx.beginPath();
						var x_offset = get_x_offset(current_time);
						ctx.moveTo(x_offset, timeline_height);
						ctx.lineTo(x_offset, timeline_height + (af % Q == 0 ? 10 : 4));
						ctx.stroke()
					}
					current_time += K;
					af++
				}
				//draw polyline
				ctx.beginPath();
				ctx.moveTo(get_x_offset(start_time), timeline_height);
				for (var ah in al) {
					var at = al[ah];
					var ar = ah / (al.length - 1) * (end_time - start_time) + start_time;
					ctx.lineTo(get_x_offset(ar), F(at))
				}
				ctx.lineTo(get_x_offset(end_time), timeline_height);
				ctx.closePath();
				ctx.fill();
				ctx.stroke();
				if (e) {
					if (s == "left") {
						ctx.textAlign = "left"
					} else {
						ctx.textAlign = "right"
					}
					ctx.fillStyle = i.time_fill;
					ctx.strokeStyle = i.mark_color;
					var aj = ac / S;
					var ae = Math.floor(ath.log(aj) / Math.log(10));
					// var aq = Math.pow(10,timeline_data ae) / 10;
					var ag = F(aq) - F(0);
					var ai = [0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100];
					var am = 1;
					while (Math.abs(ag) < 12 && am < ai.length) {
						aq = Math.pow(10, ae) * ai[am];
						ag = F(aq) - F(0);
						am++
					}
					var ap = aq;
					while (ap <= aj) {
						var ak = F(ap);
						if (ab != undefined) {
							if (s == "left") {
								ctx.beginPath();
								ctx.moveTo(ab - 3, ak);
								ctx.lineTo(ab + 3, ak);
								ctx.stroke();
								ctx.fillText(ap.toPrecision(2), ab + 5, ak + 3)
							} else {
								ctx.beginPath();
								ctx.moveTo(ab - 3, ak);
								ctx.lineTo(ab + 3, ak);
								ctx.stroke();
								ctx.fillText(ap.toPrecision(2), ab - 5, ak + 3)
							}
						}
						ap += aq
					}
				}
			};
			if (timeline_data.values != undefined) {
				S = (timeline_height - 12) / timeline_data.scale;
				ac = (timeline_height - 12);
				plot_line(timeline_data.values, timeline_data.density)
			} else {
				var z = 0;
				for (var T in timeline_data.lines) {
					var Y = timeline_data.lines[T];
					var ad = timeline_data["scale" + Y.suffix];
					var H = timeline_data["values" + Y.suffix];
					//height
					var y = (f.height - 32) / timeline_data.lines.length;
					timeline_height = y * (z + 1);
					S = (y - 13) / ad;
					ac = y - 13;
					plot_line(H);
					z++
				}
			} if (u.custom_draw != undefined) {
				ctx.save();
				u.custom_draw(ctx, {
					tmap: get_x_offset,
					width: f.width,
					height: f.height
				});
				ctx.restore()
			}
			//draw events
			if (u.draw_events != undefined) {
				ctx.save();
				u.draw_events(ctx, {
					tmap: get_x_offset,
					width: f.width,
					height: f.height
				});
				ctx.restore();
			}
			ctx.fillStyle = i.range_fill;
			ctx.strokeStyle = i.range_stroke;
			if (u.range_t0 != undefined && u.range_t1 != undefined) {
				if ((u.range_t1 - u.range_t0) / (end_time - start_time) < 0.7) {
					var Z = get_x_offset(u.range_t0);
					var X = get_x_offset(u.range_t1);
					ctx.fillRect(Z, 0, X - Z, n);
					ctx.strokeRect(Z, 0, X - Z, n)
				}
			}
			ctx.fillStyle = i.tracking_fill;
			ctx.strokeStyle = i.tracking_stroke;
			if (l && p != o) {
				var Z = get_x_offset(p);
				var X = get_x_offset(o);
				ctx.fillRect(Z, 0, X - Z, n);
				ctx.strokeRect(Z, 0, X - Z, n)
			}
			if (ab != undefined) {
				ctx.textAlign = "center";
				var G = W(ab);
				var J = d(new Date(G * 1000));
				var C = ctx.measureText(J).width;
				var aa = ab;
				if (ab - C / 2 < 10) {
					aa = 10 + C / 2
				}
				if (ab + C / 2 > timeline_width - 10) {
					aa = timeline_width - 10 - C / 2
				}
				if (i.time_shadow != undefined) {
					ctx.fillStyle = i.time_shadow;
					ctx.fillText(J, aa, 13)
				}
				ctx.fillStyle = i.time_fill;
				ctx.fillText(J, aa, 12)
			}
			if (ab != undefined) {
				ctx.beginPath();
				ctx.strokeStyle = i.current_line;
				ctx.moveTo(ab, 14);
				ctx.lineTo(ab, n);
				ctx.stroke()
			}
		};
		var t = function() {
			if (g == undefined) {
				u.redraw()
			} else {
				u.redraw(g[0], g[1])
			}
		};
		u.safe_redraw = t;
		this.reloadData = function(data) {
			if (data != undefined) {
				if (data.start != undefined && data.end != undefined) {
					u.timeline_data = data
				} else {
					u.timeline_data = undefined
				}
			} else {
				u.timeline_data = undefined
			}
			t()
		};
		this.setRange = function(x, w) {
			u.range_t0 = x;
			u.range_t1 = w;
			t()
		};
		this.setFocusTime = function(w) {
			if (w) {
				u.redraw(m(w), 0.5)
			} else {
				u.redraw()
			}
		};
		$(f).mousemove(function(w) {
			w.offsetX = w.pageX - $(f).offset().left;
			w.offsetY = w.pageY - $(f).offset().top;
			o = q(w.offsetX);
			u.redraw(w.offsetX, w.offsetY / n);
			u.mouse_t = q(w.offsetX);
			v("onmousetchanged", undefined)
		});
		$(f).mouseout(function() {
			u.redraw();
			u.mouse_t = undefined;
			v("onmousetchanged", undefined)
		});
		$(f).dblclick(function() {
			h = !h;
			t()
		});
		$(f).mousedown(function(w) {
			w.offsetX = w.pageX - $(f).offset().left;
			w.offsetY = w.pageY - $(f).offset().top;
			l = true;
			p = q(w.offsetX);
			o = p;
			u.redraw(w.offsetX, w.offsetY / n)
		});
		$(window).mouseup(function(x) {
			if (o < p) {
				var w = p;
				p = o;
				o = w
			}
			if (l) {
				if (k.track_range) {
					if (p == o) {
						u.range_t0 = undefined;
						u.range_t1 = undefined
					} else {
						u.range_t0 = p;
						u.range_t1 = o
					}
					v("onrangechanged", undefined)
				}
				l = false
			}
			t()
		});
		$(window).resize(function() {
			f.width = $(u).width();
			u.redraw()
		});
		t();
		this.timeline_export = function() {
			return f.toDataURL("image/png")
		};
		this.format_date = d
	})
});
pkuvis_distribution_view = function(c, b) {
	if (!b) {
		b = {}
	}
	var s = b.width ? b.width : 100;
	var q = b.height ? b.height : 50;
	var o = [];
	var f = 1e+100,
		h = -1e+100,
		p;
	for (var A in c) {
		var D = c[A];
		o.push(D);
		if (D < f) {
			f = D
		}
		if (D > h) {
			h = D
		}
	}
	o.sort();
	p = h;
	if (o.length > 10) {
		p = (o[Math.floor(o.length * 0.5)] - f) * 3 + f
	}
	var e = b.start ? b.start : f;
	var d = b.end ? b.end : p;
	var u = [];
	for (var A = 0; A < s; A++) {
		u.push(0)
	}
	var r = (d - e) / u.length;
	for (var A in o) {
		var D = o[A];
		var w = Math.round((D - e) / (d - e) * (u.length - 1));
		var C = 5;
		for (var z = -C; z <= C; z++) {
			var j = w + z;
			if (j >= 0 && j < u.length) {
				var n = j / (u.length - 1) * (d - e) + e;
				u[w + z] += Math.exp(-(n - D) * (n - D) / 2 / r / r)
			}
		}
	}
	var B = 0.001;
	for (var A in u) {
		if (u[A] > B) {
			B = u[A]
		}
	}
	if (b.scale) {
		B = b.scale
	}
	var a;
	if (b.canvas) {
		a = b.canvas;
		v = b.context
	} else {
		a = document.createElement("canvas");
		a.width = s;
		a.height = q;
		var v = a.getContext("2d")
	} if (b.stroke_style) {
		v.strokeStyle = b.stroke_style
	}
	var g = function(i) {
		if (b.y_range) {
			return i * (b.y_range[0] - b.y_range[1]) + b.y_range[1]
		} else {
			return q - 1 - i * q
		}
	};
	v.beginPath();
	v.moveTo(0, g(0));
	for (var A in u) {
		var l = g(u[A] / B);
		var m = A / (u.length - 1) * s;
		v.lineTo(m, l)
	}
	v.lineTo(s, g(0));
	if (b.fill_style) {
		v.fillStyle = b.fill_style;
		v.fill()
	}
	v.stroke();
	if (b.return_params) {
		return {
			scale: B,
			start: e,
			end: d
		}
	}
	if (b.return_dataurl) {
		return a.toDataURL()
	} else {
		return a
	}
};