if (!document.createElement("canvas").getContext) {
	document.getElementById("browser-warning").style.display = "block"
}
var G_zxcname = "weibo-1.7";
var G_weibourl = null;

if (true) {
	var ql = document.location.search.substr(1);
	var m;
	if (m = ql.match(/event=([A-Za-z0-9\-\.]+)/)) {
		G_zxcname = m[1]
	}
	if (m = ql.match(/event=(http:\/\/weibo.com\/([0-9]+)\/([0-9a-zA-Z]+))/)) {
		G_weibourl = m[1];
		G_zxcname = "ID-" + Weibo_url2mid(m[3])
	}
}
var G_duration = 5 * 86400;
var G_enable_task = false;

var data_fields = ["id", "mid", "uid", "children", "type", "t", "user_created_at", "followers_count", "statuses_count", "friends_count", "username", "text", "words", "verified", "emotion"];
var array2object = function(a, b) {
	var d = {};
	for (var c in b) {
		d[b[c]] = a[c]
	}
	return d
};

var text_shown = false;
var text_toggled = function() {};

function toggle_text() {
	if (text_shown) {
		$("#graph-texts").addClass("hide")
	} else {
		$("#graph-texts").removeClass("hide")
	}
	text_shown = !text_shown;
	text_toggled(text_shown);
	$("#btn-toggle-text").toggleClass("active")
}
var set_highlight_user = function(a) {};
var do_select_user_nodes = function(a) {};
var set_hover_node = function(a) {};
var do_select_tweet = function(a) {};
jQuery.fn.fadeToggle = function(a, c, b) {
	return this.animate({
		opacity: "toggle"
	}, a, c, b)
};
var SYSTEM_INITIALIZE = function(timeline_data) {
	var items = [];//convert array to objects
	var start_time = 1e+100;
	var end_time = -1e+100;
	var time_list = [];
	var followers_count_list = [];
	var item_dict = {};
	for (var aw in timeline_data) {
		var item = array2object(timeline_data[aw], data_fields);
		if (item.type & 1 == 0 && item.type != 0) {
			continue
		}
		item_dict[item.id] = item;
		//var children = [];
		//for (var k in item.children) {
		//    if (item_dict.indexOf(k) != -1) {
		//        children.push(k);
		//    }
		//}
		//item.children = children;
		item.w = Math.log(1 + parseInt(item.followers_count) / 50);
		items.push(item)
	}
	for (var i in item_dict) {
	    var children = [];
	    for (var j in item_dict[i].children) {
	        if (item_dict[item_dict[i].children[j]] != undefined) {
	            children.push(item_dict[i].children[j]);
	        }
	    }
        item_dict[i].children = children
	}
	//for (var aw in items) {
	//	var aA = items[aw];
	//	var br = aA.parent;
	//	if (br != null && item_dict[br] != null) {
	//		item_dict[br].children.push(items[aw].id)
	//	}
	//}
	for (var aw in items) {
		var an = items[aw].t;
		if (start_time > an) {
			start_time = an
		}
		if (end_time < an) {
			end_time = an
		}
		followers_count_list.push(items[aw].followers_count);
		time_list.push(an)
	}
	$("#data-status").html("totally " + items.length + " statuses.");
	var aR = function(start_time, end_time, length, time_list, gaussian_smooth, forward, backward) {
		var a = [];
		for (var bI = 0; bI < length; bI++) {
			a.push(0)
		}
		var recover_offset = function(t) {
			return t / (length - 1) * (end_time - start_time) + start_time
		};
		var get_offset = function(t) {
			return (t - start_time) / (end_time - start_time) * (length - 1)
		};
		for (var i in time_list) {
			var t = time_list[i];
			var begin = t + forward;
			var end = t + backward;
			var begin_offset = Math.floor(get_offset(begin));
			var end_offset = Math.ceil(get_offset(end));
			if (begin_offset < 0) {
				begin_offset = 0
			}
			if (end_offset >= length) {
				end_offset = length - 1
			}
			for (var current_offset = begin_offset; current_offset <= end_offset; current_offset++) {
			    a[current_offset] += gaussian_smooth(recover_offset(current_offset) - t, i)
			}
		}
		return a
	};
	var timeline_data = {};
	//end_time = start_time + G_duration;
	//var ax = time_list.slice().sort();
	//if (ax.length >= 5) {
	//	var aQ = ax[Math.floor(ax.length * 0.8)];
	//	end_time = start_time + (aQ - start_time) * 3;
	//	if (end_time > ax[ax.length - 1]) {
	//		end_time = ax[ax.length - 1]
	//	}
	//}
	timeline_data.start = start_time;
	timeline_data.end = end_time;
	var ap = 20000000;
	timeline_data.values_1 = aR(start_time, end_time, 4000, time_list, function (a) {
		return Math.exp(-a * a / 2 / ap / ap) / Math.sqrt(2 * Math.PI) / ap
	}, -ap * 5, ap * 5);
	var a3 = 0;
	for (var aw in timeline_data.values_1) {
		if (timeline_data.values_1[aw] > a3) {
			a3 = timeline_data.values_1[aw]
		}
	}
	timeline_data.scale_1 = a3;
	timeline_data.lines = [{
			name: "Influence",
			suffix: "_1"
		}
	];
	$("#timeline")[0].reloadData(timeline_data);
	var T = [];
	T[0] = 0;
	for (var aw = 1; aw < timeline_data.values_1.length; aw++) {
		T.push(T[aw - 1] + timeline_data.values_1[aw] + timeline_data.values_1[aw - 1])
	}
	for (var aw = 0; aw < T.length; aw++) {
		T[aw] /= T[T.length - 1]
	}
	var au = function(bJ, bI) {
		var bH = [];
		for (var bG = 0; bG < bI; bG++) {
			var bF = bG / (bI - 1) * (bJ.length - 1);
			var j = Math.floor(bF);
			if (j == bJ.length - 1) {
				bH.push(bJ[bJ.length - 1])
			} else {
				var s = bF - j;
				bH.push(bJ[j] * (1 - s) + bJ[j + 1] * s)
			}
		}
		return bH
	};
	var Y = function(bG, j) {
		var bF = [];
		for (var t = 0; t < bG.length; t++) {
			var s;
			if (t == 0 || t == bG.length - 1) {
				s = bG[t]
			} else {
				s = bG[t] * (1 - j) + (bG[t - 1] + bG[t + 1]) / 2 * j
			}
			bF.push(s)
		}
		return bF
	};
	T = au(T, 400);
	for (var aw = 0; aw < 10; aw++) {
		T = Y(T, 0.1)
	}
	var ay = function(j) {
		var bF = (j - start_time) / (end_time - start_time);
		if (bF <= 0 || bF >= 1) {
			return bF
		}
		var a = bF * (T.length - 1);
		var i = Math.floor(a);
		if (i == T.length - 1) {
			return 1
		}
		var bH = a - i;
		var bG = T[i] * (1 - bH) + T[i + 1] * bH;
		return bG
	};
	var l = function(t) {
		if (t <= 0 || t >= 1) {
			return t
		}
		var bF = 0,
			bG = T.length - 1;
		while (bG - bF > 0) {
			var i = Math.floor((bF + bG) / 2);
			if (T[i] > t) {
				bG = i - 1
			} else {
				if (bF == i) {
					break
				}
				bF = i
			}
		}
		bG = bF + 1;
		var j = (t - T[bF]) / (T[bG] - T[bF]);
		var a = bF * (1 - j) + bG * j;
		return a / (T.length - 1) * (end_time - start_time) + start_time
	};
	var node_items = {};
	node_items.start = start_time;
	node_items.end = end_time;
	node_items.nodes = item_dict;
	var transform_data = function(items) {
		var data = {
			start: items.start,
			end: items.end,
			nodes: {}
		};
		for (var s in items.nodes) {
			data.nodes[s] = {
				id: s,
				uid: items.nodes[s].uid,
				mid: items.nodes[s].mid,
				type: items.nodes[s].type,
				t: items.nodes[s].t,
				children: [],
				w: items.nodes[s].w,
				text: items.nodes[s].text,
				words: items.nodes[s].words,
				username: items.nodes[s].username,
				followers_count: items.nodes[s].followers_count,
				comment: {
					text: ""
				},
				emotion: items.nodes[s].emotion
			};
			for (var a in items.nodes[s].children) {
				var t = items.nodes[s].children[a];
				data.nodes[s].children.push(t)
			}
			data.nodes[s].children.sort(function(i, j) {
			    return items.nodes[i].t - items.nodes[j].t
			})
		}
		for (var s in data.nodes) {
			for (var a in data.nodes[s].children) {
			    data.nodes[data.nodes[s].children[a]].parent = s
			}
			data.nodes[s].children_count = data.nodes[s].children.length;
			data.nodes[s].text_length = data.nodes[s].text.length
		}
		return data
	};
	node_items = transform_data(node_items);
	var layout_sail = function(data) {
		var node_list = [];
		for (var i in data.nodes) {
			node_list.push(i)
		}
		node_list.sort(function(i, j) {
		    return data.nodes[i].t - data.nodes[j].t
		});
		var current_y = 0;
		for (var i in node_list) {
			var t = node_list[i];
			var num_children = data.nodes[t].children.length;
			if (data.nodes[t].y == undefined) {
				data.nodes[t].y = current_y;
				current_y += (num_children + 1)
			}
			for (var c in data.nodes[t].children) {
				var child = data.nodes[data.nodes[t].children[c]];
				if (data.nodes[t].children.length == 1) {
					child.y = data.nodes[t].y
				} else {
				    child.y = data.nodes[t].y + (1 - c / (data.nodes[t].children.length - 1)) * num_children
				}
			}
		}
		var min_y = 0,
			max_y = 0.001;
		for (var t in data.nodes) {
			var node = data.nodes[t];
			if (min_y > node.y) {
				min_y = node.y
			}
			if (max_y < node.y) {
			    max_y = node.y
			}
		}
		for (var t in data.nodes) {
			var node = data.nodes[t];
			node.y = (node.y - min_y) / (max_y - min_y);
			node.x = node.t - (Math.random() * 365 * 24 * 60 * 60)
		}
		return data
	};
	var layout_tree = function(data) {
		var j = [];
		for (var i in data.nodes) {
			j.push(i)
		}
		j.sort(function(i, bN) {
			return data.nodes[i].t - data.nodes[bN].t
		});
		for (var i in j) {
			var t = j[i];
			var node = data.nodes[t];
			node.x = undefined;
			node.y = undefined;
			node.occupy_count = false;
			node.total_nodes = false
		}
		var bK = function(bP) {
			if (bP.occupy_count) {
				return bP.occupy_count
			}
			var bQ = 1;
			var bO = 0;
			for (var bN in bP.children) {
				bO += bK(data.nodes[bP.children[bN]])
			}
			return bP.occupy_count = Math.max(bQ, bO)
		};
		var bJ = function(i) {
			return Math.log(1 + 10 * i)
		};
		var bL = function(bO, bP, bV, bN) {
			var bX = bV - bN / 2;
			var bU = bV + bN / 2;
			var bW = 0;
			for (var y_offset in bO.children) {
				var bT = data.nodes[bO.children[y_offset]];
				bW += bK(bT)
			}
			bW += 2;
			var bS = 1;
			for (var bR = bO.children.length - 1; bR >= 0; bR--) {
				var bT = data.nodes[bO.children[y_offset]];
				bS += bT.occupy_count / 2;
				var bQ = (bS / bW) * (bU - bX) + bX;
				bT.x = bP;
				bT.y = bQ;
				bL(bT, bP + bJ(bT.children.length), bQ, bT.occupy_count / bW * bN);
				bS += bT.occupy_count / 2
			}
		};
		for (var i in j) {
			var t = j[i];
			var bG = data.nodes[t];
			if (!bG.y) {
				bG.x = 0;
				bG.y = 0;
				bL(bG, bJ(bG.children.length), 0, Math.PI)
			}
		}
		var bM = 0,
			bF = 0.001;
		var s = 0,
			bH = 0.001;
		for (var t in data.nodes) {
			var bG = data.nodes[t];
			if (s > bG.x) {
				s = bG.x
			}
			if (bH < bG.x) {
				bH = bG.x
			}
			if (bM > bG.y) {
				bM = bG.y
			}
			if (bF < bG.y) {
				bF = bG.y
			}
		}
		for (var t in data.nodes) {
			var bG = data.nodes[t];
			bG.x = (bG.x - s) / (bH - s);
			bG.y = (bG.y - child_y_interval) / (bF - child_y_interval)
		}
	};
	var aa;
	var V;
	var X;
	var bj;
	var F;
	var aC = 50;
	var y = null;
	var layout_pan = function(data) {
		var node_ids = [];
		for (var i in data.nodes) {
			node_ids.push(i)
		}
		node_ids.sort(function(i, j) {
			return data.nodes[i].t - data.nodes[j].t
		});
		for (var i in node_ids) {
			var n = node_ids[i];
			var node = data.nodes[n];
			node.x = undefined;
			node.y = undefined;
			node.circular_expand = false;
			node.occupy_count = false;
			node.total_nodes = false
		}
		for (var i in node_ids) {
			var n = node_ids[i];
			var node = data.nodes[n];
			if (y) {
			    if (node[y] > aC || bS == 0) {
			        node.circular_expand = true
				}
			} else {
			    if (node.children.length > aC || bS == 0) {
			        node.circular_expand = true
				}
			}
		}
		var get_occupy_count = function(item) {
		    if (item.occupy_count) {
		        return item.occupy_count
			}
			var b1 = 1;
			var bY = 0;
			for (var i in item.children) {
			    var node = data.nodes[item.children[i]];
				if (!node.circular_expand) {
					bY += get_occupy_count(b0)
				}
			}
			return item.occupy_count = Math.max(b1, bY)
		};
		var a = function(bY) {
			if (bY.total_nodes) {
				return bY.total_nodes
			}
			var b0 = 1;
			for (var i in bY.children) {
				var bZ = data.nodes[bY.children[i]];
				if (!bZ.circular_expand) {
					b0 += a(bZ)
				}
			}
			return bY.total_nodes = b0
		};
		var bG = function(i) {
			return Math.pow(a(i), 0.3)
		};
		var bI = function(bZ, bX, b0) {
			var i = bG(bZ);
			var bY = function(b9, ca, cb, b1) {
				var b5 = 0;
				var cf = 0;
				for (var ce in b9.children) {
					var cg = data.nodes[b9.children[ce]];
					if (!cg.circular_expand) {
						b5++;
						cf += get_occupy_count(cg)
					}
				}
				var cd = false;
				if (ca == 1) {
					b1 = Math.PI * 2 * b5 / 100;
					b1 = Math.min(b1, Math.PI * 5);
					if (b1 < Math.PI * 2) {
						b1 = Math.PI * 2;
						cd = true
					}
				}
				var b8 = cb - b1 / 2;
				var b6 = cb + b1 / 2;
				var b2 = 0;
				var b4 = function(cj) {
					return 1 - Math.exp(-cj / 3)
				};
				var b7 = 0;
				for (var ce in b9.children) {
					var cg = data.nodes[b9.children[ce]];
					if (cg.circular_expand == false) {
						b7 += get_occupy_count(cg) / 2;
						var b3 = (b7) / cf * (b6 - b8) + b8;
						var ch = 0;
						var cc = 1;
						if (ca == 1 && !cd) {
							ch = -(b5 - (b2 + 0.5)) / b5 * (b4(ca) - b4(ca - 1)) * 0.5;
							cc = -(b5 - (b2 + 0.5)) / b5 * 0.5 + 1
						}
						cg.x = bX + i * (b4(ca) + ch) * Math.cos(b3);
						cg.y = b0 + i * (b4(ca) + ch) * Math.sin(b3);
						var ci = b1 * get_occupy_count(cg) / cf * 0.8;
						ci = Math.min(Math.PI / 4, ci);
						bY(cg, ca + cc, b3, ci);
						b7 += get_occupy_count(cg) / 2;
						b2++
					}
				}
			};
			bZ.x = bX;
			bZ.y = b0;
			bY(bZ, 1, 0)
		};
		var bV = [];
		var bP = [];
		var t = [];
		var bR = 0;
		for (var i in node_ids) {
			var n = node_ids[i];
			var node = data.nodes[n];
			if (node.circular_expand) {
			    node.fr_algo_id = bV.length;
			    node.circular_radius = bG(node);
			    bV.push(node);
				bP.push(node.circular_radius * 1.2);
				bR += node.circular_radius
			}
		}
		for (var i in node_ids) {
			var n = node_ids[i];
			var node = data.nodes[n];
			if (node.circular_expand) {
				var bL = node.parent ? data.nodes[node.parent] : null;
				while (bL && bL.circular_expand == false) {
					bL = data.nodes[bL.parent]
				}
				if (bL) {
					t.push([bL.fr_algo_id, bN.fr_algo_id])
				}
			}
		}
		var s = jsfr_initialize(bV.length, t, {
			radius: bP,
			k: bR / bV.length * 10
		});
		s.nodes[0][0] = 0;
		s.nodes[0][1] = 0;
		s.nodes[0][5] = 1;
		for (var bS = 1; bS < bV.length; bS++) {
			var bF = Math.PI * 2 * bS / bV.length;
			s.nodes[bS][0] = Math.cos(bF);
			s.nodes[bS][1] = Math.sin(bF)
		}
		for (var bS = 0; bS < bV.length * 20; bS++) {
			s.iterate()
		}
		s.k = bR / bV.length * 0.5;
		for (var bS = 0; bS < bV.length * 20; bS++) {
			s.iterate()
		}
		for (var bS in s.nodes) {
			bV[bS].x = s.nodes[bS][0];
			bV[bS].y = s.nodes[bS][1]
		}
		for (var bS in node_ids) {
			var bK = node_ids[bS];
			var bN = data.nodes[bK];
			if (bN.circular_expand) {
				bI(bN, bN.x, bN.y)
			}
		}
		var bQ = 1e+100,
			bU = -1e+100;
		var bH = 1e+100,
			child_y_interval = -1e+100;
		for (var bK in data.nodes) {
			var bN = data.nodes[bK];
			if (bH > bN.x) {
				bH = bN.x
			}
			if (child_y_interval < bN.x) {
				child_y_interval = bN.x
			}
			if (bQ > bN.y) {
				bQ = bN.y
			}
			if (bU < bN.y) {
				bU = bN.y
			}
		}
		if (bU - bQ > child_y_interval - bH) {
			var bT = (bH + child_y_interval) / 2;
			child_y_interval = bT + (bU - bQ) / 2;
			bH = bT - (bU - bQ) / 2
		} else {
			var bW = (bQ + bU) / 2;
			bU = bW + (child_y_interval - bH) / 2;
			bQ = bW - (child_y_interval - bH) / 2
		}
		aa = 1 / (child_y_interval - bH);
		for (var bK in data.nodes) {
			var bN = data.nodes[bK];
			bN.x = (bN.x - bH) / (child_y_interval - bH);
			bN.y = (bN.y - bQ) / (bU - bQ)
		}
		V = function() {
			for (var bZ in data.nodes) {
				var bY = data.nodes[bZ];
				bY.x = bY.x * (child_y_interval - bH) + bH;
				bY.y = bY.y * (bU - bQ) + bQ;
				bY.total_nodes = undefined;
				bY.occupy_count = undefined
			}
			for (var i in node_ids) {
				var bZ = node_ids[i];
				var bY = data.nodes[bZ];
				if (bY.circular_expand) {
					bI(bY, bY.x, bY.y)
				}
			}
			for (var bZ in data.nodes) {
				var bY = data.nodes[bZ];
				bY.x = (bY.x - bH) / (child_y_interval - bH);
				bY.y = (bY.y - bQ) / (bU - bQ)
			}
		};
		F = function(bY) {
			var bX = bY.x * (child_y_interval - bH) + bH;
			var i = bY.y * (bU - bQ) + bQ;
			return {
				x: bX,
				y: i,
				radius: bG(bY)
			}
		};
		X = function() {
			var i = {};
			for (var b0 in data.nodes) {
				var bZ = data.nodes[b0];
				if (bZ.circular_expand) {
					var bY = bZ.x * (child_y_interval - bH) + bH;
					var bX = bZ.y * (bU - bQ) + bQ;
					i[b0] = {
						x: bY,
						y: bX,
						radius: bG(bZ)
					}
				}
			}
			return i
		};
		bj = function(bX) {
			for (var bZ in data.nodes) {
				var bY = data.nodes[bZ];
				if (bX[bZ]) {
					var i = bX[bZ];
					bY.circular_expand = true;
					bY.x = (i.x - bH) / (child_y_interval - bH);
					bY.y = (i.y - bQ) / (bU - bQ)
				} else {
					bY.circular_expand = false
				}
			}
			V()
		}
	};
	var layout_type = "sail-span";
	var bi = "sail-span";
	var node_size = "retweets";
	var K = "linear";
	$(".btn-action").removeClass("active");
	$(".ref-sail").addClass("active");
	bi = "sail-span";
	layout_sail(node_items);
	var init_layout = function(layout_type) {
		layout_type = layout_type;
		if (layout_type == "tree") {
			layout_tree(node_items)
		} else {
			if (layout_type == "sail-span") {
				layout_sail(node_items)
			} else {
				$(".btn-action").removeClass("active");
				$(".ref-pan").addClass("active");
				bi = "pan";
				layout_pan(node_items)
			}
		}
		draw_layout()
	};
	//get the largest children number
	var k = 0;
	for (var aw in node_items.nodes) {
		if (node_items.nodes[aw].children.length > k) {
			k = node_items.nodes[aw].children.length
		}
	}
	var M = {};
	var w = {};
	for (var aw in node_items.nodes) {
		var aW = node_items.nodes[aw];
		if (M[aW.uid] == undefined) {
			M[aW.uid] = []
		}
		M[aW.uid].push(aw)
	}
	for (var aw in M) {
		var A = {
			reposts: 0,
			followers_count: node_items.nodes[M[aw][0]].followers_count,
			screen_name: node_items.nodes[M[aw][0]].username,
			uid: aw,
			nodes: M[aw].length
		};
		for (var av in M[aw]) {
			var aW = node_items.nodes[M[aw][av]];
			A.reposts += aW.children.length
		}
		w[aw] = A
	}
	var canvas_graph = $("#canvas-graph")[0];
	var canvas_graph_previous_statistics = $("#canvas-graph-previous-statistics")[0];
	var canvas_graph_over = $("#canvas-graph-over")[0];
	var canvas_graph_over_lines = $("#canvas-graph-over-lines")[0];
	var canvas_graph_nodes = $("#canvas-graph-nodes")[0];
	var canvas_overview = $("#canvas-overview")[0];
	var canvas_graph_overlay = $("#canvas-graph-overlay")[0];
	canvas_graph.width = $("#graph").width();
	canvas_graph.height = $("#graph").height();
	canvas_graph_nodes.width = $("#graph").width();
	canvas_graph_nodes.height = $("#graph").height();
	canvas_graph_previous_statistics.width = $("#graph").width();
	canvas_graph_previous_statistics.height = $("#graph").height();
	canvas_graph_over_lines.width = canvas_graph_over.width = $("#graph").width();
	canvas_graph_over_lines.height = canvas_graph_over.height = $("#graph").height();
	canvas_graph_overlay.width = $("#graph").width();
	canvas_graph_overlay.height = $("#graph").height();
	$("#graph-sketchpad").css("width", canvas_graph.width + "px");
	$("#graph-sketchpad").css("height", canvas_graph.height + "px");
	pkuvis_sketchpad_initialize($("#graph-sketchpad")[0]);
	$("#graph-sketchpad")[0].on_sketchpad_close = function() {
		// $("#graph-sketchpad")h.hide();
		$("#btn-paint").removeClass("active")
	};
	var params;
	var aq = 1;
	var I = false;
	var aF = [];
	var bE = function(a, i) {
		aF.push({
			type: a,
			t: parseInt(new Date().getTime() / 1000),
			params: i
		})
	};
	bE("startup", {});
	var az = function(a) {
		return true
	};
	var get_color = function(a) {
		return null
	};
	set_emotion_color = function() {
		var s = [
			[0, 229, 124, 94],
			[1 / 6, 148, 97, 45],
			[2 / 6, 77, 65, 20],
			[3 / 6, 25, 30, 5],
			[4 / 6, 41, 70, 35],
			[5 / 6, 43, 114, 80],
			[1, 28, 160, 142]
		];
		var j = function(bF, bH) {
			for (var bG = 0; bG < s.length - 1; bG++) {
				var bK = s[bG][0];
				var bJ = s[bG + 1][0];
				if (bH >= bK && bH <= bJ) {
					var bI = (bH - bK) / (bJ - bK);
					var bL = s[bG][bF];
					var bM = s[bG + 1][bF];
					return parseInt(bL * (1 - bI) + bM * bI)
				}
			}
			return s[s.length - 1][bF]
		};
		var i = function(bG) {
			if (bG > 1) {
				bG = 1
			}
			if (bG < 0) {
				bG = 0
			}
			var bI = j(1, bG);
			var bH = j(2, bG);
			var bF = j(3, bG);
			return [bI, bH, bF].join(",")
		};
		var a = function(bF) {
			if (bF.emotion === undefined || bF.emotion === null) {
				return null
			}
			var t = -bF.emotion + 0.5;
			if (t < 0) {
				t = 0
			}
			if (t > 1) {
				t = 1
			}
			return i(t)
		};
		get_color = a;
		G()
	};
	var init_scene = function(t0, t1, y0, y1, bS) {
		var canvas_graph_width = canvas_graph.width;
		var canvas_graph_height = canvas_graph.height;
		if (t0 == undefined) {
			t0 = 0
		}
		if (t1 == undefined) {
			t1 = 1
		}
		if (y0 == undefined) {
			y0 = 0
		}
		if (y1 == undefined) {
			y1 = 1
		}
		if (layout_type == "circular") {
			var i = (t1 + t0) / 2;
			var bJ = Math.abs(y1 - y0) * (canvas_graph_width - 20) / (canvas_graph_height - 36);
			t0 = i - bJ / 2;
			t1 = i + bJ / 2
		}
		var t2c = function(bU) {
			return (bU - start_time) / (end_time - start_time)
		};
		var it2c = function(bU) {
			return bU * (end_time - start_time) + start_time
		};
		if (K == "nonlinear") {
			t2c = ay;
			it2c = l
		}
		if (layout_type == "sail-span") {
		    var tmap = function (bU) {
				return (t2c(bU) - t0) / (t1 - t0) * (canvas_graph_width - 20) + 10
			};
		    var itmap = function (bU) {
				return it2c((bU - 10) / (canvas_graph_width - 20) * (t1 - t0) + t0)
			}
		} else {
			var tmap = function(bU) {
				return ((bU) - t0) / (t1 - t0) * (canvas_graph_width - 20) + 10
			};
			var itmap = function (bU) {
				return ((bU - 10) / (canvas_graph_width - 20) * (t1 - t0) + t0)
			}
		}
		var icmap = function(bU) {
			return (bU - 10) / (canvas_graph_width - 20) * (t1 - t0) + t0
		};
		var ymap = function(bU) {
			return (bU - y0) / (y1 - y0) * (canvas_graph_height - 36) + 10
		};
		var iymap = function(bU) {
			return (bU - 10) / (canvas_graph_height - 36) * (y1 - y0) + y0
		};
		var bL = Math.pow((t1 - t0) * (y1 - y0), 0.33);
		var node_scale = 1.5 / (0.5 + bL) * Math.sqrt(6000 / items.length);
		if (bS != undefined) {
			node_scale *= bS
		}
		var get_w;
		if (node_size == "retweets") {
			get_w = function(bU) {
				return Math.log(2 + bU.children.length) * canvas_graph_width / 1000 * node_scale * aq
			}
		} else {
			if (node_size == "followers") {
			    get_w = function (bU) {
					return Math.pow(bU.followers_count, 0.3) / 6 * canvas_graph_width / 1000 * node_scale * aq
				}
			} else {
				if (node_size == "uniform") {
				    get_w = function (bU) {
						return 2 * canvas_graph_width / 1000 * node_scale * aq
					}
				} else {
					if (node_size == "posts") {
					    get_w = function (bU) {
							return Math.pow(w[bU.uid].reposts, 0.3) * canvas_graph_width / 1000 * node_scale * aq
						}
					} else {
					    get_w = function (bU) {
							return node_size(bU) * node_scale * aq
						}
					}
				}
			}
		}
		params = {
		    tmap: tmap,
			ymap: ymap,
			icmap: icmap,
			itmap: itmap,
			iymap: iymap,
			t2c: t2c,
			it2c: it2c,
			t0: t0,
			t1: t1,
			y0: y0,
			y1: y1,
			node_scale: node_scale,
			get_w: get_w
		};
		var bH = {
			time: K,
			t0: t0,
			t1: t1,
			y0: y0,
			y1: y1
		};
		if (true) {
			bE("zoom", bH)
		}
		if (layout_type == "sail-span") {} else {}
		J = false;
		$(canvas_graph_previous_statistics).hide();
		$("#btn-show-stat").removeClass("active")
	};
	var bx = [];
	var O = function(a) {
		var x_offset = params.tmap(a.x);
		var y_offset = params.ymap(a.y);
		var weight = params.get_w(a)*10;
		var bK = Math.ceil(weight) + 6;
		var bI = Math.round(x_offset);
		var bG = Math.round(y_offset);
		var t = (weight + 5) * (weight + 5);
		for (var s = -bK; s <= bK; s++) {
			for (var j = -bK; j <= bK; j++) {
				var i = (bI + s - x_offset) * (bI + s - x_offset) + (bG + j - y_offset) * (bG + j - y_offset);
				if (i < t) {
					if (bI + s >= 0 && bI + s <= canvas_graph.width) {
						if (bG + j >= 0 && bG + j <= canvas_graph.height) {
							if (bx[bI + s + (bG + j) * canvas_graph.width] == undefined) {
								bx[bI + s + (bG + j) * canvas_graph.width] = [a.id]
							} else {
								bx[bI + s + (bG + j) * canvas_graph.width].push(a.id)
							}
						}
					}
				}
			}
		}
	};
	var render_scene = function() {
		bx = [];
		var canvas_graph_ctx = canvas_graph.getContext("2d");
		var canvas_graph_nodes_ctx = canvas_graph_nodes.getContext("2d");
		var canvas_width = canvas_graph.width;
		var canvas_height = canvas_graph.height;
		canvas_graph_ctx.clearRect(0, 0, canvas_width, canvas_height);
		canvas_graph_nodes_ctx.clearRect(0, 0, canvas_width, canvas_height);
		var ymap = params.ymap;
		var tmap = params.tmap;
		var t2c = params.t2c;
		var get_w = params.get_w;
		var check_valid = function(i) {
			return true;
			return i.y >= params.y0 && i.y <= params.y1 && t2c(i.t) >= params.t0 && t2c(i.t) <= params.t1
		};
		var t = node_items;
		//draw edges
		for (var i in t.nodes) {
			var node = t.nodes[i];
			var first_last_child_y_offset_diff = 0,
				child_y_interval = 1e+100;
			if (node.children.length >= 2) {
				var first_child = t.nodes[node.children[0]];
				var last_child = t.nodes[node.children[node.children.length - 1]];
				var first_child_y_offset = ymap(first_child.y);
				var last_child_y_offset = ymap(last_child.y);
				first_last_child_y_offset_diff = Math.abs(last_child_y_offset - first_child_y_offset);
				child_y_interval = first_last_child_y_offset_diff / (node.children.length - 1)
			}
			if (true) {
				if (child_y_interval < 2 && layout_type != "circular") {
					var b1 = Math.sqrt(node.children.length / 1000);
					if (b1 > 0.6) {
						b1 = 0.6
					}
					if (b1 < 0.01) {
						b1 = 0.01
					}
					canvas_graph_ctx.fillStyle = "rgba(174,199,232," + b1 + ")";
					canvas_graph_ctx.strokeStyle = "rgba(31,119,180," + b1 * 0.5 + ")";
					canvas_graph_ctx.beginPath();
					var x_offset = tmap(node.x),
						y_offset = ymap(node.y);
					canvas_graph_ctx.moveTo(x_offset, y_offset);
					for (var i in node.children) {
						var child_node = t.nodes[node.children[i]];
					    var child_x_offset = tmap(child_node.x),
							child_y_offset = ymap(child_node.y);
						if (i == 0 && layout_type == "sail-span") {
						    canvas_graph_ctx.quadraticCurveTo(x_offset, child_y_offset, child_x_offset, child_y_offset)
						} else {
						    canvas_graph_ctx.lineTo(child_x_offset, child_y_offset)
						}
					}
					canvas_graph_ctx.lineTo(x_offset, y_offset);
					//canvas_graph_ctx.fill();
					canvas_graph_ctx.stroke()
				} else {
					for (var i in node.children) {
					    var child_node = t.nodes[node.children[i]];
					    if (child_node == undefined) {
					        continue;
					    }
						if (true || check_valid(node) || check_valid(child_node)) {
							var x_offset = tmap(node.x),
								y_offset = ymap(node.y);
							var child_x_offset = tmap(child_node.x),
								child_y_offset = ymap(child_node.y);
							canvas_graph_ctx.beginPath();
							canvas_graph_ctx.moveTo(x_offset, y_offset);
							var x1 = x_offset;
							y2 = child_y_offset;
							if (layout_type == "sail-span") {
							    canvas_graph_ctx.quadraticCurveTo(x1, y2, child_x_offset, child_y_offset)
							} else {
							    canvas_graph_ctx.lineTo(child_x_offset, child_y_offset)
							}
							al = 0.5;
							canvas_graph_ctx.strokeStyle = "rgba(174,199,232," + al + ")";
							if (child_node.circular_expand) {
							    var bU = canvas_graph_ctx.createLinearGradient(x_offset, y_offset, child_x_offset, child_y_offset);
								bU.addColorStop(0, "rgba(31,119,180,1)");
								bU.addColorStop(1, "rgba(31,119,180,0)");
								canvas_graph_ctx.strokeStyle = bU
							}
							canvas_graph_ctx.stroke()
						}
					}
				}
			}
		}
		//draw nodes
		for (var i in t.nodes) {
			var node = t.nodes[i];
			var color = "";
			var emotion_color = get_color(node);
			if (emotion_color) {
				color = emotion_color
			} else {
				color = "31,119,180";
				if (node.type == 2) {
					color = "23,190,207"
				}
			}
			node.shown = true;
			if (!az(node)) {
				node.shown = false;
				canvas_graph_nodes_ctx.fillStyle = "rgba(" + color + ",0.2)"
			} else {
				canvas_graph_nodes_ctx.fillStyle = "rgba(" + color + ",0.8)"
			} if (check_valid(node)) {
				var x_offset = tmap(node.x);
				var y_offset = ymap(node.y);
				canvas_graph_nodes_ctx.beginPath();
				var weight = get_w(node);
				canvas_graph_nodes_ctx.arc(x_offset, y_offset, weight, 0, Math.PI * 2);
				canvas_graph_nodes_ctx.fill();
				if (node.shown) {
					O(node)
				}
			}
		}
		var start_date = new Date(timeline_data.start * 1000);
		start_date.setHours(12);
		start_date.setMinutes(0);
		start_date.setSeconds(0);
		var start_time = start_date.getTime() / 1000 - 3600 * 24;
		var skip;
		if (true) {
			canvas_graph_ctx.strokeStyle = "rgba(0,0,0,0.6)";
			canvas_graph_ctx.fillStyle = "gray";
			var bS = [
				[1, 10],
				[5, 6],
				[10, 6],
				[20, 3],
				[60, 6],
				[360, 4],
				[720, 14],
				[1440, 7],
				[1440 * 7, 4],
                [1440 * 30, 4],
                [1440 * 365,4]
			];
			for (var i in bS) {
				var bG = bS[i][0] * 60;
				if ((timeline_data.end - timeline_data.start) / bG < 500) {
					bG = bS[i][0] * 60;
					skip = bS[i][1];
					break
				}
			}
			var b4 = 0;
			current_time = start_time;
			var bH = -10000000000;
			while (current_time < timeline_data.end) {
				if (current_time >= timeline_data.start) {
					var ce = (b4 % skip == 0 ? 7 : 4);
					canvas_graph_ctx.beginPath();
					var x_offset = tmap(current_time);
					if (b4 % skip == 0) {
						if (x_offset - bH > 200) {
							canvas_graph_ctx.textAlign = "center";
							canvas_graph_ctx.fillText($("#timeline")[0].format_date(new Date(current_time * 1000)), x_offset, canvas_height - 4);
							bH = x_offset;
							ce = 10
						}
					}
					canvas_graph_ctx.moveTo(x_offset, canvas_height - 24);
					canvas_graph_ctx.lineTo(x_offset, canvas_height - 24 + ce);
					canvas_graph_ctx.stroke()
				}
				current_time += bG;
				b4++
			}
		}
		if (aO) {
			aO()
		}
	};
	var E = function() {
		var a = {};
		for (var i in z) {
			var bF = node_items.nodes[z[i]];
			if (a[bF.id] == undefined) {
				a[bF.id] = {
					id: bF.id,
					parent: bF.parent,
					children: [],
					t: bF.t,
					expand: true
				}
			} else {
				a[bF.id].expand = true
			}
			while (bF != undefined) {
				if (a[bF.id] == undefined) {
					a[bF.id] = {
						id: bF.id,
						parent: bF.parent,
						children: [],
						t: bF.t,
						expand: false
					}
				}
				bF = node_items.nodes[bF.parent]
			}
		}
		for (var i in a) {
			var bH = a[i];
			if (a[bH.parent] != undefined) {
				a[bH.parent].children.push(bH.id)
			}
		}
		var bJ = true;
		while (bJ) {
			bJ = false;
			for (var i in a) {
				var bH = a[i];
				if (bH.level == undefined) {
					if (bH.parent == undefined) {
						bH.level = 0;
						bJ = true
					} else {
						if (a[bH.parent].level != undefined) {
							bJ = true;
							bH.level = a[bH.parent].level + 1
						}
					}
				}
			}
		}
		var bG = 0;
		var j = function(bK) {
			a[bK].number = bG++;
			var bM = a[bK].children.sort(function(bN, i) {
				return a[bN].t - a[i].t
			});
			for (var bL in bM) {
				j(bM[bL])
			}
		};
		for (var i in a) {
			if (a[i].level == 0) {
				j(i)
			}
		}
		var s = [];
		for (var i in a) {
			var t = a[i];
			s.push(t.id)
		}
		s.sort(function(bK, i) {
			return a[bK].number - a[i].number
		});
		return {
			nodes: a,
			node_sort: s
		}
	};
	var c = function(bF) {
		var canvas_graph_previous_statistics_ctx = canvas_graph_previous_statistics.getContext("2d");
		var canvas_graph_previous_statistics_width = canvas_graph_previous_statistics.width;
		var canvas_graph_previous_statistics_height = canvas_graph_previous_statistics.height;
		canvas_graph_previous_statistics_ctx.save();
		canvas_graph_previous_statistics_ctx.fillStyle = "rgba(255,255,255,0.7)";
		canvas_graph_previous_statistics_ctx.clearRect(0, 0, s, bL);
		canvas_graph_previous_statistics_ctx.fillRect(0, 0, s, bL);
		canvas_graph_previous_statistics_ctx.fillStyle = "white";
		var bM = 0;
		for (var bG in bF) {
			if (bF[bG] > bM) {
				bM = bF[bG]
			}
		}
		for (var bG in bF) {
			var t = node_items.nodes[bG];
			var j = bF[bG];
			var bH = j / bM;
			var bJ = params.tmap(t.x);
			var bI = params.ymap(t.y);
			var a = params.get_w(t);
			var bK = canvas_graph_previous_statistics_ctx.createRadialGradient(bJ, bI, 0, bJ, bI, a + bH * 8);
			bK.addColorStop(0, "rgba(255,127,14," + bH + ")");
			bK.addColorStop(1, "rgba(255,127,14,0)");
			canvas_graph_previous_statistics_ctx.fillStyle = bK;
			canvas_graph_previous_statistics_ctx.beginPath();
			canvas_graph_previous_statistics_ctx.arc(bJ, i, a + bH * 8, 0, Math.PI * 2);
			canvas_graph_previous_statistics_ctx.fill()
		}
		canvas_graph_previous_statistics_ctx.globalCompositeOperation = "source-over";
		for (var bG in bF) {
			var t = node_items.nodes[bG];
			var j = bF[bG];
			var bH = 0.2 + 0.8 * j / bM;
			canvas_graph_previous_statistics_ctx.fillStyle = "rgba(255,127,14," + bH + ")";
			var bJ = params.tmap(t.x);
			var bI = params.ymap(t.y);
			var a = params.get_w(t);
			canvas_graph_previous_statistics_ctx.beginPath();
			canvas_graph_previous_statistics_ctx.arc(bJ, i, a, 0, Math.PI * 2);
			canvas_graph_previous_statistics_ctx.fill()
		}
		canvas_graph_previous_statistics_ctx.restore()
	};
	var bo = [];
	var v = undefined;
	var z = [];
	var ao;
	highlight_nodes_expandall = false;
	var a7 = [];
	var bt = function() {
		if (L) {
			L()
		}
	};
	var aJ = undefined;
	var D = undefined;
	var aS = undefined;
	var aX = undefined;
	var N = function() {};
	var e = function() {};
	set_highlight_user = function(a) {
		D = a;
		ao = undefined;
		render_interactive_scene();
		bE("highlight-user", {
			uid: a
		})
	};
	set_hover_node = function(i, a) {
		aJ = i;
		if (!a) {
			D = undefined
		}
		render_interactive_scene()
	};
	//var bw = function() {
	//	$("#graph-texts > div").each(function() {
	//		var a = $(this).children(".controls").children(".id").html();
	//		node_items.nodes[a].comment.text = $("#text-node-" + a + " > div.comments > textarea").val();
	//		node_items.nodes[a].comment.importance = $("#text-node-" + a + " > div.comments > .importance")[0].rating_value;
	//		node_items.nodes[a].comment.attitude = $("#text-node-" + a + " > div.comments > .attitude")[0].rating_value
	//	})
	//};
	var ab = function() {
		var tmap = params.tmap;
		var ymap = params.ymap;
		var nodes = node_items;
		//bw();
		$("#graph-texts > div").each(function() {
			var bX = $(this).children(".controls").children(".id").html();
			var bW = false;
			for (var bV in z) {
				if (z[bV] == bX) {
					bW = true
				}
			}
			if (!highlight_nodes_expandall) {
				bW &= (ao != undefined && ao == bX)
			}
			if (!bW) {
				$(this).remove()
			}
		});
		for (var bG in z) {
			var color = "214,39,40";
			var bJ = z[bG];
			var node = nodes.nodes[bJ];
			if (highlight_nodes_expandall == false) {
				if (node.id != ao) {
					continue
				}
			}
			var x_offset = tmap(node.x),
				y_offset = ymap(node.y);
			var bT = x_offset + 150;
			var bS = y_offset - 15;
			var text_node = $("#text-node-" + node.id);
			if (text_node.length == 0) {
				var bQ = '<div style="left: ' + bT + "px; top: " + bS + 'px" id="text-node-' + node.id + '"></div>';
				$("#graph-texts").append(bQ);
				bK = $("#text-node-" + node.id);
				var bM = node.comment.text;
				// forward.html('<div class="title"><span class="name">' + bN.username + '</span> <span class="meta">Fo: ' + bN.followers_count + '</span><span class="color" style="background-color: rgb(' + bO + ');"></span></div><div class="content">' + bN.text + '<br /><span class="meta">' + $("#timeline")[0].format_date(new Date(bN.t * 1000)) + ", Repost: " + bN.children.length + '</span></div><div class="controls"><span class="id">' + bN.id + '</span><span class="view-tweet">进入</span><span class="deselect">✕</span></div><div class="comments" style="display:none;">重要度: <div class="rating pkuvis-rating importance" style="display:inline"></div><br />您的态度: 反对 <div class="rating pkuvis-rating attitude" style="display:inline"></div> 支持<br /><textarea>' + bM + "</textarea></div>");
				if (node.children.length > 10) {
					var canvas = document.createElement("canvas");
					var ctx = canvas.getContext("2d");
					canvas.width = 200;
					canvas.height = 30;
					var time_list = [];
					var a = function(bW) {
						time_list.push(node.t);
						for (var bV in bW.children) {
							a(node_items.nodes[node.children[bV]])
						}
					};
					a(node);
					var j = pkuvis_distribution_view(time_list, {
						canvas: canvas,
						context: ctx,
						y_range: [0, 30],
						width: 200,
						stroke_style: "rgb(0,0,0)",
						fill_style: "rgba(0,0,0,0.05)",
						return_params: true
					});
					pkuvis_distribution_view(node.children.map(function(bV) {
						return node_items.nodes[bV].t
					}), {
						canvas: canvas,
						context: ctx,
						y_range: [0, 30],
						width: 200,
						scale: j.scale,
						start: j.start,
						end: j.end,
						stroke_style: "rgb(31,119,180)",
						fill_style: "rgba(31,119,180,0.4)"
					});
					bK.append(s)
				}
				var bF = Weibo_miduid2url(node.mid, node.uid);
				bK.children(".controls").children(".view-tweet").click(function() {
					window.open(bF)
				});
				bK.children(".controls").children(".add-comment").click(function() {
					bK.children(".comments").slideToggle()
				});
				bK[0].my_translate = {
					x: 0,
					y: 0
				};
				if (x_offset > canvas_graph.width / 2) {
					bK[0].my_translate.x = -500
				}
				pkuvis_rating_initialize(bK.children(".comments").children(".rating")[0]).rating_set(node.importance);
				pkuvis_rating_initialize(bK.children(".comments").children(".rating")[1], "single").rating_set(node.attitude);
				bK.mousedown(function(bV) {
					bV.stopPropagation()
				}).click(function(bV) {
					bV.stopPropagation()
				});
				var i = bK.children(".title");
				i[0].my_node_id = node.id;
				i[0].my_textnode = bK[0];
				i.mousedown(function(bV) {
					bK.parent().append(this.my_textnode);
					this.dragging = {
						x: bV.pageX,
						y: bV.pageY,
						x0: this.my_textnode.my_translate.x,
						y0: this.my_textnode.my_translate.y
					};
					ao = this.my_node_id;
					ae();
					bV.stopPropagation()
				});
				$(window).mousemove({
					title_node: i[0],
					text_node: bK[0]
				}, function(bX) {
					if (bX.data.title_node.dragging != undefined) {
						var bW = bX.pageX - bX.data.title_node.dragging.x;
						var bV = bX.pageY - bX.data.title_node.dragging.y;
						bX.data.text_node.my_translate.x = bX.data.title_node.dragging.x0 + bW;
						bX.data.text_node.my_translate.y = bX.data.title_node.dragging.y0 + bV;
						render_interactive_scene()
					}
				});
				$(window).mouseup({
					title_node: i[0]
				}, function(bV) {
					if (bV.data.title_node.dragging != undefined) {
						bV.data.title_node.dragging = undefined
					}
				});
				$("#text-node-" + node.id + " > div.controls > .deselect").click(function(bX) {
					var bY = $(this).parent().children(".id").html();
					bE("deselect", {
						node: bY
					});
					var bW = [];
					for (var bV in z) {
						if (z[bV] != bY) {
							bW.push(z[bV])
						}
					}
					z = bW;
					ao = undefined;
					bX.stopPropagation();
					render_interactive_scene()
				});
				bT += bK[0].my_translate.x;
				bS += bK[0].my_translate.y;
				bK.attr("style", "left: " + bT + "px; top: " + bS + "px;")
			} else {
				bT += text_node[0].my_translate.x;
				bS += text_node[0].my_translate.y;
				text_node.attr("style", "left: " + bT + "px; top: " + bS + "px;")
			}
			text_node.addClass("highlight")
		}
	};
	var bg = undefined;
	var aU = function() {
		return;
		if (bg == ao) {
			return
		}
		bg = ao;
		if (ao == undefined) {
			$("#rightlist-currenttweet").hide();
			$("#rightlist-users").show();
			$("#btn-do-repost-status").html("");
			$("#current-tweet-retweet-text").val("");
			$("#current-tweet-retweet-id").html("")
		} else {
			$("#rightlist-currenttweet").show();
			$("#rightlist-users").hide();
			var j = "";
			var bG = "";
			var t = function(bH) {
				var i;
				i = "<div>";
				i += '<div class="header">';
				i += ' <span class="data">' + bH.id + "</span>";
				i += ' <span class="name">' + bH.username + "</span>";
				i += ' <span class="meta">' + $("#timeline")[0].format_date(new Date(bH.t * 1000)) + "</span>";
				i += "</div>";
				i += '<div class="content">' + bH.text + "</div>";
				i += "</div>";
				return i
			};
			var bF = function(bH) {
				var i;
				i = "<div onclick=\"do_select_tweet('" + bH.id + "');\" onmouseover=\"set_hover_node('" + bH.id + "')\">";
				i += ' <span class="name">' + bH.username + "</span>";
				i += ' <span class="content">' + bH.text + " (转发: " + bH.children.length + ")</span>";
				i += "</div>";
				return i
			};
			var s = node_items.nodes[ao];
			j = t(s);
			for (var a in s.children) {
				bG += bF(node_items.nodes[s.children[a]])
			}
			$("#current-tweet-info").html("评论/转发: " + s.children.length + "，作者粉丝数: " + s.followers_count);
			$("#current-tweet-parent").html(j);
			$("#current-tweet-children").html(bG);
			$("#btn-do-repost-status").html("");
			$("#current-tweet-retweet-text").val("");
			$("#current-tweet-retweet-id").html(ao)
		}
	};
	$("#btn-do-repost").click(function() {
		var a = $("#current-tweet-retweet-text").val();
		var i = $("#current-tweet-retweet-id").html();
		if (a == "" || i == "") {
			$("#btn-do-repost-status").html("转发请输入内容");
			return
		}
		$("#btn-do-repost-status").html("Repost ...");
		bE("retweet", {
			id: i,
			status: a
		});
		ak("post", "statuses/repost.json", {
			id: i,
			status: a
		}, function(j) {
			if (j.id != undefined) {
				$("#btn-do-repost-status").html("done.")
			} else {
				$("#btn-do-repost-status").html("Failed.")
			}
		})
	});
	var g = undefined;
	var d = undefined;
	var render_interactive_scene = function() {
		var canvas_graph_over_ctx = canvas_graph_over.getContext("2d");
		var canvas_graph_over_lines_ctx = canvas_graph_over_lines.getContext("2d");
		var canvas_graph_over_ctx_weight = canvas_graph_over.width;
		var canvas_graph_over_ctx_height = canvas_graph_over.height;
		canvas_graph_over_ctx.clearRect(0, 0, canvas_graph_over_ctx_weight, canvas_graph_over_ctx_height);
		canvas_graph_over_ctx.font = "12px Helvetica";
		canvas_graph_over_lines_ctx.clearRect(0, 0, canvas_graph_over_ctx_weight, canvas_graph_over_ctx_height);
		var tmap = params.tmap;
		var imap = params.itmap;
		var ymap = params.ymap;
		var data = node_items;
		ab();
		aU();
		if (g != aJ) {
			g = aJ;
			N()
		}
		if (d != D) {
			d = D;
			e()
		}
		var j = function(item1, item2) {
			var item1_x = tmap(item1.x),
				item1_y = ymap(item1.y);
			var item2_x = tmap(item2.x),
				item2_y = ymap(item2.y);
			canvas_graph_over_lines_ctx.beginPath();
			canvas_graph_over_lines_ctx.moveTo(item1_x, item1_y);
			var x1 = item1_x;
			y2 = item2_y;
			if (layout_type == "sail-span") {
			    canvas_graph_over_lines_ctx.quadraticCurveTo(x1, y2, item2_x, item2_y)
			} else {
				canvas_graph_over_lines_ctx.lineTo(item2_x, item2_y)
			}
			canvas_graph_over_lines_ctx.strokeStyle = "#2ca02c";
			canvas_graph_over_lines_ctx.stroke()
		};
		for (var i in z) {
			var color = "214,39,40";
			var bQ = z[i];
			var node = data.nodes[bQ];
			var ca = node;
			while (node != undefined) {
				var parent = data.nodes[node.parent];
				if (parent != undefined) {
				    j(data.nodes[node.parent], node)
				}
				node = data.nodes[node.parent]
			}
			node = ca;
			canvas_graph_over_ctx.strokeStyle = canvas_graph_over_ctx.fillStyle = "rgba(" + color + ",1)";
			var b1 = true;
			while (node != undefined) {
				if (!node.shown) {
					O(node)
				}
				node.shown = true;
				var b3 = tmap(node.x);
				var b2 = ymap(node.y);
				var b4 = params.get_w(node);
				canvas_graph_over_ctx.beginPath();
				canvas_graph_over_ctx.arc(b3, b2, weight, 0, Math.PI * 2);
				if (!b1) {
					canvas_graph_over_ctx.fill()
				}
				var bO = data.nodes[node.parent];
				node = data.nodes[node.parent];
				canvas_graph_over_ctx.fillStyle = "#2ca02c";
				b1 = false
			}
		}
		for (var i in z) {
			var bV = "214,39,40";
			var bQ = z[i];
			var bW = data.nodes[bQ];
			var b0 = tmap(bW.x),
				y_offset = ymap(bW.y);
			if (true || bW.id == ao) {
				canvas_graph_over_ctx.textAlign = "center";
				var b4 = params.get_w(bW);
				canvas_graph_over_ctx.fillStyle = "white";
				canvas_graph_over_ctx.fillText(node.username, b0, y_offset - weight - 7);
				canvas_graph_over_ctx.fillStyle = "black";
				canvas_graph_over_ctx.fillText(node.username, b0, y_offset - weight - 8)
			}
			if (bW.id == ao) {
				canvas_graph_over_ctx.strokeStyle = "rgba(255,127,14,1)";
				for (var bN in M[bW.uid]) {
					var bU = data.nodes[M[bW.uid][bN]];
					if (!az(bU) && !bU.shown) {
						continue
					}
					if (bU != bW) {
						var b3 = tmap(bU.x);
						var b2 = ymap(bU.y);
						var b4 = params.get_w(bU);
						canvas_graph_over_ctx.beginPath();
						canvas_graph_over_ctx.arc(b3, b2, weight + 3, 0, Math.PI * 2);
						canvas_graph_over_ctx.stroke()
					}
				}
			}
			canvas_graph_over_ctx.strokeStyle = canvas_graph_over_ctx.fillStyle = "rgba(" + bV + ",1)";
			var b3 = tmap(bW.x);
			var b2 = ymap(bW.y);
			var b4 = params.get_w(bW);
			canvas_graph_over_ctx.beginPath();
			canvas_graph_over_ctx.arc(b3, b2, weight + 3, 0, Math.PI * 2);
			canvas_graph_over_ctx.fill();
			if (!bW.shown) {
				O(bW)
			}
			bW.shown = true;
			var bG = $("#text-node-" + bW.id);
			canvas_graph_over_ctx.strokeStyle = canvas_graph_over_ctx.fillStyle = "rgba(" + bV + ",1)";
			if (highlight_nodes_expandall || bW.id == ao) {
				var b3 = bG.position().left;
				var b2 = bG.position().top;
				var b4 = bG.width() + 10;
				var cc = bG.height() + 10;
				var b8 = tmap(bW.x);
				var b7 = ymap(bW.y);
				if (b8 < b3 || b8 > b3 + b4 || b7 < b2 || b7 > b2 + cc) {
					var bK = 1;
					if (b8 < b3) {
						b2 = b2 + 15
					} else {
						if (b8 > b3 + b4) {
							b3 = b3 + b4;
							b2 = b2 + 15
						} else {
							if (b7 < b2) {
								b3 = b3 + b4 / 2;
								bK = 2
							} else {
								b3 = b3 + b4 / 2;
								b2 = b2 + cc / 2;
								bK = 2
							}
						}
					}
					canvas_graph_over_ctx.beginPath();
					canvas_graph_over_ctx.moveTo(b3, b2);
					if (bK == 1) {
						canvas_graph_over_ctx.quadraticCurveTo(x_offset, b2, x_offset, y_offset)
					} else {
						canvas_graph_over_ctx.quadraticCurveTo(b3, y_offset, x_offset, y_offset)
					}
					canvas_graph_over_ctx.strokeStyle = bV;
					canvas_graph_over_ctx.stroke()
				}
			}
		}
		if (D != undefined) {
			for (var bN in M[D]) {
				var bU = data.nodes[M[D][bN]];
				if (!az(bU) && !bU.shown) {
					continue
				}
				canvas_graph_over_ctx.strokeStyle = "rgb(214,39,40)";
				var b3 = tmap(bU.x);
				var b2 = ymap(bU.y);
				var b4 = params.get_w(bU);
				canvas_graph_over_ctx.beginPath();
				canvas_graph_over_ctx.arc(b3, b2, weight + 1, 0, Math.PI * 2);
				var b5 = (b4 + 1) + 2;
				var cd = b5 * 2;
				canvas_graph_over_ctx.moveTo(b3 + b5, b2);
				canvas_graph_over_ctx.lineTo(b3 + i, b2);
				canvas_graph_over_ctx.moveTo(b3 - b5, b2);
				canvas_graph_over_ctx.lineTo(b3 - i, b2);
				canvas_graph_over_ctx.moveTo(b3, b2 + b5);
				canvas_graph_over_ctx.lineTo(b3, b2 + i);
				canvas_graph_over_ctx.moveTo(b3, b2 - b5);
				canvas_graph_over_ctx.lineTo(b3, b2 - i);
				canvas_graph_over_ctx.stroke()
			}
		}
		if (aJ != undefined && ao != aJ) {
			var node = node_items.nodes[aJ];
			var x_offset = params.tmap(node.x);
			var y_offset = params.ymap(node.y);
			canvas_graph_over_ctx.textAlign = "left";
			var weight = params.get_w(node);
			var node_text = node.text;
			if (false) {
				if (node_text.length > 20) {
					node_text = node_text.substr(0, 17) + "..."
				}
				node_text = [node_text]
			} else {
			    node_text = node_text + "\n转发: " + node.children.length + " 粉丝: " + node.followers_count;
				if (node.comment.importance != undefined) {
				    node_text += "\n重要度: " + pkuvis_rating_text(node.comment.importance)
				}
				if (node.comment.attitude != undefined) {
				    node_text += "\n我的态度: 反对 " + pkuvis_rating_text(node.comment.attitude, "attitude") + " 支持"
				}
				if (node.comment.text != "") {
				    node_text += "\n我的评论: " + node.comment.text
				}
				node_text = measureTextBlock(canvas_graph_over_ctx, node_text, 200);
				if (node_text.length == 0) {
					node_text = [""]
				}
			}
			var b9 = canvas_graph_over_ctx.measureText(node.username).width;
			for (var cb = 0; cb < node_text.length; cb++) {
				var bH = canvas_graph_over_ctx.measureText(node_text[cb]).width;
				if (bH > b9) {
					b9 = bH
				}
			}
			canvas_graph_over_ctx.beginPath();
			canvas_graph_over_ctx.arc(x_offset, y_offset, weight + 3, 0, Math.PI * 2);
			canvas_graph_over_ctx.strokeStyle = "rgb(31,119,180)";
			canvas_graph_over_ctx.stroke();
			canvas_graph_over_ctx.beginPath();
			canvas_graph_over_ctx.moveTo(x_offset + weight + 3, y_offset);
			canvas_graph_over_ctx.lineTo(x_offset + weight + b9 + 20, y_offset);
			canvas_graph_over_ctx.lineTo(x_offset + weight + b9 + 20, y_offset + 18 + 14 * node_text.length);
			canvas_graph_over_ctx.lineTo(x_offset + weight + 10, y_offset + 18 + 14 * node_text.length);
			canvas_graph_over_ctx.lineTo(x_offset + weight + 10, y_offset + 20);
			canvas_graph_over_ctx.quadraticCurveTo(x_offset + weight + 10, y_offset, x_offset + weight + 3, y_offset);
			canvas_graph_over_ctx.fillStyle = "rgba(239,244,250,0.7)";
			canvas_graph_over_ctx.fill();
			canvas_graph_over_ctx.stroke();
			canvas_graph_over_ctx.font = "bold 12px Helvetica";
			canvas_graph_over_ctx.fillStyle = "white";
			canvas_graph_over_ctx.fillText(node.username, x_offset + weight + 15, y_offset + 13);
			canvas_graph_over_ctx.fillStyle = "black";
			canvas_graph_over_ctx.fillText(node.username, x_offset + weight + 15, y_offset + 12);
			canvas_graph_over_ctx.font = "12px Helvetica";
			for (var cb = 0; cb < node_text.length; cb++) {
				canvas_graph_over_ctx.fillStyle = "white";
				canvas_graph_over_ctx.fillText(node_text[i], x_offset + weight + 15, y_offset + 27 + 14 * i);
				canvas_graph_over_ctx.fillStyle = "black";
				canvas_graph_over_ctx.fillText(node_text[i], x_offset + weight + 15, y_offset + 26 + 14 * i)
			}
			var ca = node;
			while (node != undefined) {
				var parent_node = data.nodes[node.parent];
				if (parent_node != undefined) {
					parent_node._current_hover_children = node.id;
					j(data.nodes[node.parent], node);
					var bY = params.tmap(parent_node.x);
					var bP = params.ymap(parent_node.y);
					var ce = params.get_w(parent_node);
					canvas_graph_over_ctx.beginPath();
					canvas_graph_over_ctx.arc(bY, bP, ce + 2, 0, Math.PI * 2);
					canvas_graph_over_ctx.stroke()
				}
				node = data.nodes[node.parent]
			}
		}
		if (B) {
			for (var cb in bh) {
				var bZ = bh[cb];
				var node = node_items.nodes[bZ];
				var b0 = params.tmap(node.x);
				var bR = params.ymap(node.y);
				var weight = params.get_w(node);
				canvas_graph_over_ctx.strokeStyle = "rgb(214,39,40)";
				canvas_graph_over_ctx.beginPath();
				canvas_graph_over_ctx.arc(x_offset, y_offset, weight + 2, 0, Math.PI * 2);
				var b5 = 2 * (weight + 2);
				var cd = b5 * 3;
				canvas_graph_over_ctx.moveTo(x_offset, y_offset + b5);
				canvas_graph_over_ctx.lineTo(x_offset, y_offset + i);
				canvas_graph_over_ctx.moveTo(x_offset, y_offset - b5);
				canvas_graph_over_ctx.lineTo(x_offset, y_offset - i);
				canvas_graph_over_ctx.moveTo(x_offset + b5, y_offset);
				canvas_graph_over_ctx.lineTo(x_offset + i, y_offset);
				canvas_graph_over_ctx.moveTo(x_offset - b5, y_offset);
				canvas_graph_over_ctx.lineTo(x_offset - i, y_offset);
				canvas_graph_over_ctx.stroke()
			}
		}
		if (v != undefined) {
			if (v.action == "zoom" && v.x1 != undefined) {
				canvas_graph_over_ctx.strokeStyle = "rgba(31,119,180,1)";
				canvas_graph_over_ctx.fillStyle = "rgba(31,119,180,0.3)";
				canvas_graph_over_ctx.strokeRect(v.x0 - 0.5, v.y0 - 0.5, v.x1 - v.x0, v.y1 - v.y0);
				canvas_graph_over_ctx.fillRect(v.x0 - 0.5, v.y0 - 0.5, v.x1 - v.x0, v.y1 - v.y0)
			}
			if (v.action == "move-node" && v.x1) {
				canvas_graph_over_ctx.fillStyle = "rgb(255,127,14)";
				canvas_graph_over_ctx.strokeStyle = "rgb(255,127,14)";
				var dragging_node = node_items.nodes[v.dragging_node];
				var b3 = v.x1;
				var b2 = v.y1;
				var weight = params.get_w(dragging_node);
				var b6 = Math.abs(params.tmap(node.circular_radius) - params.tmap(0)) * aa;
				canvas_graph_over_ctx.beginPath();
				canvas_graph_over_ctx.arc(b3, b2, weight, 0, Math.PI * 2);
				canvas_graph_over_ctx.fill();
				canvas_graph_over_ctx.beginPath();
				canvas_graph_over_ctx.arc(b3, b2, b6, 0, Math.PI * 2);
				canvas_graph_over_ctx.stroke()
			}
		}
		if (aS != undefined && layout_type == "sail-span") {
			var x_offset = tmap(aS);
			canvas_graph_over_ctx.strokeStyle = "black";
			canvas_graph_over_ctx.beginPath();
			canvas_graph_over_ctx.moveTo(x_offset, 0);
			canvas_graph_over_ctx.lineTo(x_offset, canvas_graph_over_ctx_height);
			canvas_graph_over_ctx.stroke()
		}
	};
	$("#timeline")[0].draw_events = function(ctx, params) {
		for (var i in node_items.nodes) {
			if (node_items.nodes[i].children_count < 5) {
				continue
			}
			var node = node_items.nodes[i];
			var node_axis_x = params.tmap(node.t);
			ctx.strokeStyle = "red";
			ctx.fillStyle = "red";
			ctx.beginPath();
			ctx.moveTo(node_axis_x, params.height - 20);
			ctx.lineTo(node_axis_x - 5, params.height - 15);
			ctx.lineTo(node_axis_x - 5, params.height);
			ctx.lineTo(node_axis_x + 5, params.height);
			ctx.lineTo(node_axis_x + 5, params.height - 15);
			ctx.closePath();
			ctx.stroke();
			ctx.fill();
		}
	}
	//draw something in timeline canvas
	$("#timeline")[0].custom_draw = function(bL, bJ) {
		var bM = E();
		//draw strokes
		for (var bH in bM.nodes) {
			if (bM.nodes[bH].parent == undefined) {
				continue
			}
			var t = node_items.nodes[bM.nodes[bH].id];
			var s = node_items.nodes[bM.nodes[bH].parent];
			var bG = bJ.tmap(s.t);
			var bI = bJ.tmap(t.t);
			var a = bM.nodes[bM.nodes[bH].parent].level * 4 + 15;
			var j = bM.nodes[bH].level * 4 + 15;
			bL.strokeStyle = "#a8e4a8";
			bL.beginPath();
			bL.moveTo(bG, a);
			bL.quadraticCurveTo(bG, j, i, j);
			bL.stroke()
		}
		//draw nodes
		for (var bH in bM.nodes) {
			var bF = node_items.nodes[bM.nodes[bH].id];
			var bK = bJ.tmap(bF.t);
			if (!bM.nodes[bH].expand) {
				bL.fillStyle = "#2ca02c";
				bL.beginPath();
				bL.arc(bK, 15 + 4 * bM.nodes[bH].level, 2, 0, Math.PI * 2);
				bL.fill()
			}
		}
		for (var bH in bM.nodes) {
			var bF = node_items.nodes[bM.nodes[bH].id];
			var bK = bJ.tmap(bF.t);
			if (bM.nodes[bH].expand) {
				bL.fillStyle = "rgb(214,39,40)";
				bL.beginPath();
				bL.arc(bK, 15 + 4 * bM.nodes[bH].level, 2, 0, Math.PI * 2);
				bL.fill()
			}
		}
		if (aJ != undefined) {
			var bF = node_items.nodes[aJ];
			var bK = bJ.tmap(bF.t);
			bL.strokeStyle = "rgba(31,119,180,0.8)";
			bL.beginPath();
			bL.moveTo(bK, 0);
			bL.lineTo(bK, 100);
			bL.stroke()
		}
	};
	text_toggled = function() {
		render_interactive_scene()
	};
	//draw layout
	var draw_layout = function(t, s, j, a, i) {
		init_scene(t, s, j, a, i);
		render_scene();
		render_interactive_scene()
	};
	var H = function() {
		bo = [];
		draw_layout()
	};
	var G = function() {
		render_scene();
		render_interactive_scene()
	};
	$(".btn-layout-method").click(function() {
		$(".btn-layout-method").removeClass("active");
		$(this).addClass("active");
		var a = $(this).attr("class").match(/ref\-([0-9a-z\-]+)/)[1];
		init_layout(a);
		bE("switch-layout", {
			layout: a
		})
	});
	$(".btn-action").click(function() {
		$(".btn-action").removeClass("active");
		$(this).addClass("active");
		bi = $(this).attr("class").match(/ref\-([0-9a-z\-]+)/)[1]
	});
	$(".btn-node-size").click(function() {
		$(".btn-node-size").removeClass("active");
		$(this).addClass("active");
		node_size = $(this).attr("class").match(/ref\-([0-9a-z\-]+)/)[1];
		draw_layout(params.t0, params.t1, params.y0, params.y1);
		bE("node-size", {
			value: node_size
		});
		a9 = node_size;
		bD()
	});
	do_change_userlist_sort = function(i, a) {
		a9 = i;
		bE("userlist-sort", {
			value: a9
		});
		bD()
	};
	$(".btn-xaxis").click(function() {
		$(".btn-xaxis").removeClass("active");
		$(this).addClass("active");
		K = $(this).attr("class").match(/ref\-([0-9a-z\-]+)/)[1];
		bE("time_list-axis", {
			value: K
		});
		H()
	});
	var Z = false;
	$("#graph").mousedown(function(i) {
		Z = false;
		i.offsetX = i.pageX - $(this).offset().left;
		i.offsetY = i.pageY - $(this).offset().top;
		v = {
			action: bi,
			x0: i.offsetX,
			y0: i.offsetY,
			r_t0: params.t0,
			r_t1: params.t1,
			r_y0: params.y0,
			r_y1: params.y1
		};
		if (v.action == "pan" && layout_type == "circular") {
			var a = ag(i.offsetX, i.offsetY);
			if (a) {
				v.dragging_node = a;
				v.action = "move-node"
			}
		}
		render_interactive_scene()
	});
	draw_layout();
	var r = 0;
	var aI, aG;
	var bc = false;
	$(window).mousemove(function(j) {
		aI = j.pageX;
		aG = j.pageY;
		r = 0;
		bc = false;
		I = false;
		j.offsetX = j.pageX - $("#graph").offset().left;
		j.offsetY = j.pageY - $("#graph").offset().top;
		if (v != undefined) {
			v.x1 = j.offsetX;
			v.y1 = j.offsetY;
			if (v.action == "zoom") {
				if (layout_type == "circular") {
					var s = (canvas_graph.width - 20) / (canvas_graph.height - 36);
					if (Math.abs(v.y1 - v.y0) > Math.abs(v.x1 - v.x0)) {
						v.x1 = v.x0 + s * Math.abs(v.y1 - v.y0) * (v.x1 > v.x0 ? 1 : -1)
					} else {
						v.y1 = v.y0 + 1 / s * Math.abs(v.x1 - v.x0) * (v.y1 > v.y0 ? 1 : -1)
					}
				}
				render_interactive_scene()
			}
			if (v.action == "pan") {
				var i = v.x1 - v.x0;
				var a = v.y1 - v.y0;
				$("#graph-inner").css("left", i + "px").css("top", a + "px")
			}
			if (v.action == "move-node") {
				var i = v.x1 - v.x0;
				var a = v.y1 - v.y0;
				render_interactive_scene()
			}
		}
		Z = true
	});
	$(window).keydown(function(s) {
		if (s.keyCode == 40) {
			if (aJ != undefined) {
				var j = node_items.nodes[aJ].parent;
				var a = node_items.nodes[j].children.indexOf(aJ);
				if (a != -1 && a - 1 >= 0) {
					aJ = node_items.nodes[j].children[a - 1]
				}
			}
		}
		if (s.keyCode == 38) {
			if (aJ != undefined) {
				var j = node_items.nodes[aJ].parent;
				var a = node_items.nodes[j].children.indexOf(aJ);
				if (a != -1 && a + 1 < node_items.nodes[j].children.length) {
					aJ = node_items.nodes[j].children[a + 1]
				}
			}
		}
		if (s.keyCode == 37) {
			if (aJ != undefined) {
				var j = node_items.nodes[aJ].parent;
				if (j != undefined) {
					aJ = j
				}
			}
		}
		if (s.keyCode == 39) {
			if (aJ != undefined && node_items.nodes[aJ] != undefined) {
				var i = node_items.nodes[aJ].children;
				if (node_items.nodes[aJ]._current_hover_children != undefined) {
					aJ = node_items.nodes[aJ]._current_hover_children
				} else {
					if (i != undefined && i.length > 0) {
						aJ = i[0]
					}
				}
			}
		}
		if (s.keyCode == 32) {
			if (aJ != undefined && node_items.nodes[aJ] != undefined) {
				ar(aJ)
			}
		}
		render_interactive_scene()
	});
	$("#canvas-graph-over").mousemove(function(i) {
		if (v == undefined) {
			i.offsetX = i.pageX - $("#graph").offset().left;
			var a = params.itmap(i.offsetX);
			if (layout_type == "sail-span") {
				$("#timeline")[0].setFocusTime(a)
			} else {
				$("#timeline")[0].setFocusTime()
			}
		}
	});
	$("#btn-reset").click(function() {
		draw_layout()
	});
	$("#btn-restore").click(function() {
		if (bo.length > 0) {
			var a = bo[bo.length - 1];
			bo.pop();
			draw_layout(a[0], a[1], a[2], a[3])
		} else {
			draw_layout()
		}
	});
	$("#btn-zoom-out, #btn-zoom-in").click(function() {
		var i = 1;
		if ($(this).attr("id") == "btn-zoom-in") {
			i = -1
		}
		var bF = i * (params.t1 - params.t0);
		var bG = params.t0 - bF * 0.2;
		var t = params.t1 + bF * 0.2;
		var a = i * (params.y1 - params.y0);
		var s = params.y0 - a * 0.2;
		var j = params.y1 + a * 0.2;
		bo.push([aM.t0, aM.t1, aM.y0, aM.y1]);
		draw_layout(bG, t, s, j)
	});
	var ag = function(bK, bJ) {
		var t = bx[bJ * canvas_graph.width + bK];
		if (t == undefined) {
			return undefined
		}
		var bF = undefined;
		var bI = 1e+100;
		for (var bL in t) {
			var s = t[bL];
			if (aX != undefined) {
				if (aX[s] == undefined) {
					continue
				}
			}
			var j = node_items.nodes[s];
			var bH = params.tmap(j.x);
			var bG = params.ymap(j.y);
			var a = (bH - bK) * (bH - bK) + (bG - bJ) * (bG - bJ);
			a = Math.sqrt(a) - params.get_w(j);
			if (a < bI) {
				if (!az(j) && !j.shown) {
					continue
				}
				bF = s;
				bI = a
			}
		}
		return bF
	};
	var ar = function(s) {
		var j = false;
		for (var a in z) {
			if (s == z[a]) {
				j = true;
				ao = s
			}
		}
		if (!j) {
			z.push(s);
			ao = s
		}
		if (a7.length == 0 || a7[a7.length - 1] != s) {
			a7.push(s)
		}
		bE("select", {
			node: s
		});
		D = undefined
	};
	do_select_tweet = function(a) {
		ar(a);
		render_interactive_scene();
		if (bt) {
			bt()
		}
	};
	do_select_user_nodes = function(j) {
		z = [];
		ao = undefined;
		for (var a in M[j]) {
			z.push(M[j][a])
		}
		render_interactive_scene();
		if (bt) {
			bt()
		}
		$("#submit-box").animate({
			right: "0px"
		}, "fast");
		L()
	};
	$("#graph").click(function(i) {
		if (Z) {
			return
		}
		i.offsetX = i.pageX - $(this).offset().left;
		i.offsetY = i.pageY - $(this).offset().top;
		var a = ag(i.offsetX, i.offsetY);
		if (a != undefined) {
			ar(a)
		} else {
			ao = undefined;
			D = undefined
		}
		render_interactive_scene();
		if (bt) {
			bt()
		}
		$("#timeline")[0].safe_redraw()
	});
	$("#graph").contextmenu(function(s) {
		s.offsetX = s.pageX - $(this).offset().left;
		s.offsetY = s.pageY - $(this).offset().top;
		if (layout_type == "circular") {
			var j = ag(s.offsetX, s.offsetY);
			if (j) {
				var a = node_items.nodes[j];
				if (a.circular_expand) {
					if (a.parent) {
						a.circular_expand = false;
						var i = a;
						while (i && !i.circular_expand) {
							i = node_items.nodes[i.parent]
						}
						if (i) {
							V();
							G()
						}
						bE("circular-collapse-node", {
							id: a.id
						})
					}
				}
			}
		}
		s.preventDefault()
	});
	$("#graph").mousemove(function(a) {
		a.offsetX = a.pageX - $(this).offset().left;
		a.offsetY = a.pageY - $(this).offset().top;
		aJ = ag(a.offsetX, a.offsetY);
		render_interactive_scene()
	});
	$("#btn-highlight-all").click(function() {
		highlight_nodes_expandall = !highlight_nodes_expandall;
		if (highlight_nodes_expandall) {
			$(this).addClass("active")
		} else {
			$(this).removeClass("active")
		}
		render_interactive_scene()
	});
	$("#btn-deselect").click(function() {
		z = [];
		ao = undefined;
		bE("deselect-all", {});
		render_interactive_scene();
		if (bt) {
			bt()
		}
		$("#timeline")[0].safe_redraw()
	});
	$(window).mouseup(function(bJ) {
		bJ.offsetX = bJ.pageX - $("#graph").offset().left;
		bJ.offsetY = bJ.pageY - $("#graph").offset().top;
		if (v != undefined) {
			if (v.action == "zoom" && v.x1 != undefined) {
				var j = v.x0;
				var i = v.x1;
				var bM = v.y0;
				var bL = v.y1;
				if (j != i && bM != bL) {
					if (i < j) {
						var bO = i;
						i = j;
						j = bO
					}
					if (bL < bM) {
						var bO = bL;
						bL = bM;
						bM = bO
					}
					var bI = params.icmap(j);
					var bH = params.icmap(i);
					bM = params.iymap(bM);
					bL = params.iymap(bL);
					bo.push([aM.t0, aM.t1, aM.y0, aM.y1]);
					draw_layout(bI, bH, bM, bL)
				}
			}
			if (v.action == "pan" && v.x1 != undefined) {
				var bK = params.icmap(v.x1) - params.icmap(v.x0);
				var bF = params.iymap(v.y1) - params.iymap(v.y0);
				bo.push([aM.t0, aM.t1, aM.y0, aM.y1]);
				draw_layout(v.r_t0 - bK, v.r_t1 - bK, v.r_y0 - bF, v.r_y1 - bF);
				$("#graph-inner").css("left", "0px").css("top", "0px")
			}
			if (v.action == "move-node" && v.x1 != undefined) {
				var bG = true;
				if (!node_items.nodes[v.dragging_node].circular_expand) {
					var bP = v.x1 - v.x0;
					var bN = v.y1 - v.y0;
					var s = node_items.nodes[v.dragging_node];
					if (bP * bP + bN * bN > 10 * 10) {
						s.circular_expand = true;
						V();
						bE("circular-expand-node", {
							id: s.id
						})
					} else {
						bG = false
					}
				}
				if (bG) {
					var bK = params.icmap(v.x1) - params.icmap(v.x0);
					var bF = params.iymap(v.y1) - params.iymap(v.y0);
					var a = function(bR) {
						bR.x += bK;
						bR.y += bF;
						for (var t in bR.children) {
							var bQ = node_items.nodes[bR.children[t]];
							if (!bQ.circular_expand) {
								a(bQ)
							}
						}
					};
					a(node_items.nodes[v.dragging_node]);
					bE("circular-move-node", {
						position: F(node_items.nodes[v.dragging_node])
					});
					G()
				}
			}
			v = undefined;
			render_interactive_scene()
		}
	});
	$("#timeline")[0].onmousetchanged = function() {
		aS = this.mouse_t;
		render_interactive_scene()
	};
	//$("#ctrl-filter-followers")[0].filter_value = 0;
	//$("#ctrl-filter-followers")[0].onvaluechanged = function() {
	//	var a = Math.exp(this.slider_value * 16) - 1;
	//	this.filter_value = a;
	//	$("#ctrl-filter-followers-value").html(">= " + Math.round(a).toPrecision(2))
	//};
	//$("#ctrl-filter-reposts")[0].filter_value = 0;
	//$("#ctrl-filter-reposts")[0].onvaluechanged = function() {
	//	var a = 0;
	//	a = 200 * Math.pow(this.slider_value, 2);
	//	this.filter_value = a;
	//	$("#ctrl-filter-reposts-value").html(">= " + Math.round(a))
	//};
	//$("#ctrl-filter-text-length")[0].filter_value = 0;
	//$("#ctrl-filter-text-length")[0].onvaluechanged = function() {
	//	var a = 0;
	//	a = 200 * Math.pow(this.slider_value, 2);
	//	this.filter_value = a;
	//	$("#ctrl-filter-text-length-value").html(">= " + Math.round(a))
	//};
	//var be = function() {
	//	var i = $("#ctrl-filter-followers")[0].filter_value;
	//	var a = $("#ctrl-filter-reposts")[0].filter_value;
	//	var j = $("#ctrl-filter-text-length")[0].filter_value;
	//	bE("filter", {
	//		followers_count: i,
	//		reposts: a,
	//		length: j
	//	});
	//	var t = -1e+100;
	//	var start_time = 1e+100;
	//	if ($("#timeline")[0].range_t0 && $("#timeline")[0].range_t1) {
	//		t = $("#timeline")[0].range_t0;
	//		start_time = $("#timeline")[0].range_t1
	//	}
	//	az = function(bF) {
	//		return bF.followers_count >= i && bF.children.length >= a && bF.text.length >= j && bF.t >= t && bF.t <= start_time
	//	};
	//	bs()
	//};
	//$("#timeline")[0].onrangechanged = function() {
	//	be()
	//};
	//$("#ctrl-node-size")[0].slider_set(0.5);
	//$("#ctrl-node-size")[0].onvaluechanged = function() {
	//	var a = Math.exp(($("#ctrl-node-size")[0].slider_value - 0.5) * 3);
	//	$("#ctrl-node-size-value").html(a.toFixed(2) + "time_list")
	//};
	//$("#ctrl-node-size")[0].onvaluechanged_up = function() {
	//	var a = Math.exp(($("#ctrl-node-size")[0].slider_value - 0.5) * 3);
	//	aq = a;
	//	G()
	//};
	//$("#ctrl-expand-threshold")[0].slider_set(45 / 495);
	//$("#ctrl-expand-threshold")[0].onvaluechanged = function() {
	//	var a = parseInt($("#ctrl-expand-threshold")[0].slider_value * 495 + 5);
	//	$("#ctrl-expand-threshold-value").html(a)
	//};
	//$("#ctrl-expand-threshold")[0].onvaluechanged_up = function() {
	//	var a = parseInt($("#ctrl-expand-threshold")[0].slider_value * 495 + 5);
	//	aC = a;
	//	aB("circular")
	//};
	//$("#ctrl-filter-text-length")[0].onvaluechanged_up = $("#ctrl-filter-reposts")[0].onvaluechanged_up = $("#ctrl-filter-followers")[0].onvaluechanged_up = function() {
	//	be()
	//};
	//$("#btn-set-filter").click(function() {
	//	be()
	//});
	var bv = function() {
		bw();
		var j = [];
		for (var s in z) {
			var t = node_items.nodes[z[s]];
			j.push({
				id: z[s]
			})
		}
		var bF = {
			t0: params.t0,
			t1: params.t1,
			y0: params.y0,
			y1: params.y1
		};
		var a = {
			// event: G_zxcname,
			// uid: G_userid,
			// uname: G_username,
			nodes: j,
			region: bF,
			layout: layout_type,
			settings: {
				node_size: node_size,
				x_axis: K,
				expand_all: highlight_nodes_expandall,
				current_selection: ao
			},
			keywords: ac
		};
		if (layout_type == "circular") {
			a.circular_skeleton = X()
		}
		if ($("#graph-sketchpad").is(":visible")) {
			a.sketch = $("#graph-sketchpad")[0].sketchpad_export()
		}
		return a
	};
	var C = function(j) {
		z = [];
		for (var a in j.nodes) {
			z[a] = j.nodes[a].id
		}
		node_size = j.settings.node_size;
		K = j.settings.x_axis;
		ao = j.settings.current_selection;
		if (j.layout) {
			init_layout(j.layout);
			if (j.layout == "circular" && j.circular_skeleton) {
				bj(j.circular_skeleton)
			}
		} else {
			init_layout(layout_type)
		} if (j.expand_all) {
			highlight_nodes_expandall = j.expand_all
		}
		if (highlight_nodes_expandall) {
			$(this).addClass("active")
		} else {
			$(this).removeClass("active")
		}
		draw_layout(j.region.t0, j.region.t1, j.region.y0, j.region.y1);
		render_interactive_scene();
		if (j.keywords) {
			ac = j.keywords;
			aL()
		}
		if (j.sketch) {
			$("#graph-sketchpad")[0].sketchpad_import(j.sketch);
			$("#graph-sketchpad").show();
			$("#btn-paint").addClass("active")
		}
	};
	var a6 = [];
	var L = function () {
	    bw();
	    a6 = [];
	    var bF = $("#canvas-submit-image")[0];
	    var bO = bF.getContext("2d");
	    var bL = E();
	    var a = bL.nodes;
	    var t = bL.node_sort;
	    var s = 250;
	    for (var bM in a) {
	        var bH = a[bM];
	        bH.pos_x = 10 * bH.level;
	        if (bH.expand) {
	            var bI = Q.nodes[bH.id];
	            var bK = "转发: " + bI.children.length + " 粉丝: " + bI.followers_count;
	            bH.text_lines = measureTextBlock(bO, bI.text, 250);
	            bH.text_lines_c = measureTextBlock(bO, bK, 250);
	            bH.rect_w = 100;
	            bO.font = "12px Helvetica";
	            for (var bM in bH.text_lines) {
	                var bJ = bO.measureText(bH.text_lines[bM]).width + 10;
	                if (bH.rect_w < bJ) {
	                    bH.rect_w = bJ
	                }
	            }
	            for (var bM in bH.text_lines_c) {
	                var bJ = bO.measureText(bH.text_lines_c[bM]).width + 10;
	                if (bH.rect_w < bJ) {
	                    bH.rect_w = bJ
	                }
	            }
	            bH.rect_w = Math.max(bH.rect_w, bO.measureText(bI.username).width + 28);
	            bH.rect_h = bH.text_lines.length * 14 + 24 + bH.text_lines_c.length * 14 + 6;
	            bH.anchor_in = {
	                x: 2,
	                y: 10
	            };
	            bH.anchor_out = {
	                x: 2,
	                y: 2 + bH.rect_h - 4
	            };
	            bH.draw = function (bR) {
	                bO.shadowBlur = 5;
	                bO.shadowColor = "rgba(0,0,0,0.4)";
	                bO.fillStyle = "rgba(233,242,248,1)";
	                bO.fillRect(2, 2, bR.rect_w - 4, bR.rect_h - 4);
	                bO.shadowBlur = 0;
	                bO.shadowColor = "rgba(0,0,0,0)";
	                bO.fillStyle = "rgba(31,119,180,1)";
	                bO.fillRect(2, 2, bR.rect_w - 4, 20);
	                bO.fillStyle = "rgba(31,119,180,0.2)";
	                bO.fillRect(2, bR.text_lines.length * 14 + 24, bR.rect_w - 4, bR.text_lines_c.length * 14 + 4);
	                bO.strokeStyle = "black";
	                bO.font = "bold 13px Helvetica";
	                bO.fillStyle = "black";
	                bO.fillText(Q.nodes[bR.id].username, 8, 17);
	                if (bR.id == ao) {
	                    bO.fillStyle = "rgb(255,255,0)"
	                } else {
	                    bO.fillStyle = "white"
	                }
	                bO.fillText(Q.nodes[bR.id].username, 8, 16);
	                bO.fillStyle = "black";
	                bO.font = "12px Helvetica";
	                for (var bQ in bR.text_lines) {
	                    bO.fillText(bR.text_lines[bQ], 5, 34 + 14 * bQ)
	                }
	                for (var bQ in bR.text_lines_c) {
	                    bO.fillText(bR.text_lines_c[bQ], 5, 34 + 14 * bR.text_lines.length + 3 + 14 * bQ)
	                }
	                bO.strokeStyle = "rgba(31,119,180,1)";
	                bO.strokeRect(2, 2, bR.rect_w - 4, bR.rect_h - 4)
	            }
	        } else {
	            bO.font = "bold 13px Helvetica";
	            bH.rect_w = bO.measureText(Q.nodes[bH.id].username).width + 16;
	            bH.rect_h = 24;
	            bH.anchor_in = {
	                x: 2,
	                y: 10
	            };
	            bH.anchor_out = {
	                x: 2,
	                y: 18
	            };
	            bH.draw = function (i) {
	                bO.shadowBlur = 5;
	                bO.shadowColor = "rgba(0,0,0,0.4)";
	                bO.fillStyle = "rgba(31,119,180,1)";
	                bO.fillRect(2, 2, i.rect_w - 4, i.rect_h - 4);
	                bO.shadowBlur = 0;
	                bO.shadowColor = "rgba(0,0,0,0)";
	                bO.strokeStyle = "black";
	                bO.font = "bold 13px Helvetica";
	                bO.fillStyle = "black";
	                bO.fillText(Q.nodes[i.id].username, 8, 17);
	                bO.fillStyle = "white";
	                bO.fillText(Q.nodes[i.id].username, 8, 16);
	                bO.strokeStyle = "rgba(31,119,180,1)";
	                bO.strokeRect(2, 2, i.rect_w - 4, i.rect_h - 4)
	            }
	        }
	        s = Math.max(s, bH.rect_w + bH.pos_x)
	    }
	    var bP = 0;
	    for (var bM in t) {
	        var bH = a[t[bM]];
	        bH.pos_y = bP;
	        bP += bH.rect_h
	    }
	    var bG = Math.max(s, 300);
	    var bN = Math.max(bP, 40);
	    bF.width = bG + 11;
	    bF.height = bN + 50;
	    bO.fillStyle = "white";
	    bO.fillRect(0, 0, bG, bN);
	    bO.strokeStyle = "rgb(31,119,180)";
	    bO.save();
	    bO.translate(4.5, 18.5);
	    for (var bM in a) {
	        var bH = a[bM];
	        if (bH.parent == undefined) {
	            continue
	        }
	        var j = a[bH.parent];
	        bO.beginPath();
	        bO.moveTo(j.anchor_out.x + j.pos_x, j.anchor_out.y + j.pos_y);
	        bO.lineTo(j.anchor_out.x + j.pos_x, bH.anchor_in.y + bH.pos_y - 10);
	        bO.quadraticCurveTo(j.anchor_out.x + j.pos_x, bH.anchor_in.y + bH.pos_y, bH.anchor_in.x + bH.pos_x, bH.anchor_in.y + bH.pos_y);
	        bO.stroke()
	    }
	    for (var bM in a) {
	        var bH = a[bM];
	        bO.save();
	        bO.translate(bH.pos_x, bH.pos_y);
	        a6[bH.id] = {
	            x: bH.pos_x + 4.5,
	            y: bH.pos_y + 18.5,
	            w: bH.rect_w,
	            h: bH.rect_h
	        };
	        bH.draw(bH);
	        bO.restore()
	    }
	    bO.restore();
	    bO.textAlign = "left";
	    bO.fillStyle = "black";
	    bO.font = "12px Georgia";
	    bO.fillText(G_zxcname + " - WeiboVA from vis.pku.edu.cn/weibova", 10, 14);
	    if (t.length == 0) {
	        bO.fillText("您还没有选择微博，选择好微博再试试。", 10, 30)
	    }
	};
	$("#canvas-submit-image").click(function (bG) {
	    var t = bG.pageX - $("#canvas-submit-image").offset().left;
	    var j = bG.pageY - $("#canvas-submit-image").offset().top;
	    var a = $("#canvas-submit-image").width();
	    var bF = $("#canvas-submit-image")[0].width;
	    t *= bF / a;
	    j *= bF / a;
	    for (var s in a6) {
	        if (a6[s].x <= t && a6[s].y <= j && t <= a6[s].x + a6[s].w && j <= a6[s].y + a6[s].h) {
	            ao = s;
	            ar(s);
	            ae();
	            L();
	            break
	        }
	    }
	});
	$("#canvas-submit-image").dblclick(function (bK) {
	    var bG = bK.pageX - $("#canvas-submit-image").offset().left;
	    var bF = bK.pageY - $("#canvas-submit-image").offset().top;
	    var t = $("#canvas-submit-image").width();
	    var j = $("#canvas-submit-image")[0].width;
	    bG *= j / t;
	    bF *= j / t;
	    for (var bI in a6) {
	        if (a6[bI].x <= bG && a6[bI].y <= bF && bG <= a6[bI].x + a6[bI].w && bF <= a6[bI].y + a6[bI].h) {
	            var bM = Q.nodes[bI].y;
	            var s = Q.nodes[bI].y;
	            var a = Q.nodes[bI].t;
	            var bJ = Q.nodes[bI].t;
	            for (var bH in Q.nodes[bI].children) {
	                var bL = Q.nodes[Q.nodes[bI].children[bH]];
	                if (bL.y > s) {
	                    s = bL.y
	                }
	                if (bL.t > bJ) {
	                    bJ = bL.t
	                }
	            }
	            if (Q.nodes[bI].children.length >= 5) {
	                var bH = Math.floor(Q.nodes[bI].children.length * 0.8);
	                var bL = Q.nodes[Q.nodes[bI].children[bH]];
	                if (bL.t * 3 < bJ) {
	                    bJ = bL.t * 3
	                }
	            }
	            var bN = Math.max(0.1, s - bM);
	            s += bN * 0.1;
	            bM -= bN * 0.1;
	            if (bJ - a < 0.01) {
	                bJ = a + 0.01
	            }
	            aj(aM.t2c(a), aM.t2c(bJ), bM, s);
	            break
	        }
	    }
	});
	var at = function() {
		var j = document.createElement("canvas");
		var i = j.getContext("2d");
		var a = canvas_graph.width;
		var s = canvas_graph.height;
		s = s * (190 / a);
		a = 190;
		j.width = a;
		j.height = s;
		i.clearRect(0, 0, a, s);
		i.drawImage(canvas_graph, 0, 0, a, s);
		i.drawImage(n, 0, 0, a, s);
		i.drawImage(canvas_graph_overlay, 0, 0, a, s);
		i.drawImage(a0, 0, 0, a, s);
		i.drawImage(canvas_graph_over, 0, 0, a, s);
		return j.toDataURL()
	};


	var aD = "view";
	$("#submit-image").click(function() {
		$("#submit-image").attr("src", aV())
	});
	$("#submit-img-view").click(function() {
		$(this).addClass("active");
		$("#submit-img-tree").removeClass("active");
		aD = "view"
	});
	$("#submit-img-tree").click(function() {
		$(this).addClass("active");
		$("#submit-img-view").removeClass("active");
		aD = "tree"
	});

	highlight_groups = {};
	var aO = function() {
		var a = false;
		for (var i in highlight_groups) {
			a = true
		}
		if (!a) {
			$(canvas_graph_overlay).hide();
			var canvas_graph_overlay_ctx = canvas_graph_overlay.getContext("2d");
			canvas_graph_overlay_ctx.clearRect(0, 0, canvas_graph_overlay.width, canvas_graph_overlay.height);
			aX = undefined
		} else {
			$(canvas_graph_overlay).show();
			aX = {};
			var bL = {};
			for (var bJ in highlight_groups) {
				var bO = highlight_groups[bJ];
				for (var i in bO.ids) {
					var s = bO.ids[i];
					if (!bL[s]) {
						bL[s] = [];
						aX[s] = 1
					}
					bL[s].push(bJ)
				}
			}
			var canvas_graph_overlay_ctx = canvas_graph_overlay.getContext("2d");
			canvas_graph_overlay_ctx.clearRect(0, 0, canvas_graph_overlay.width, canvas_graph_overlay.height);
			for (var s in bL) {
				var bP = bL[s];
				var x_offset = params.tmap(node_items.nodes[s].x);
				var y_offset = params.ymap(node_items.nodes[s].y);
				var weight = params.get_w(node_items.nodes[s]) + 1;
				var bG = bP.length;
				for (var bH in bP) {
					canvas_graph_overlay_ctx.fillStyle = highlight_groups[bP[bH]].color;
					canvas_graph_overlay_ctx.beginPath();
					var bF = bH / bG * Math.PI * 2;
					var t = bF + 1 / bG * Math.PI * 2;
					canvas_graph_overlay_ctx.moveTo(child_y_interval, bK);
					canvas_graph_overlay_ctx.arc(child_y_interval, bK, bN, bF, t);
					canvas_graph_overlay_ctx.fill()
				}
			}
		}
	};
	var color_list = ["255,127,14", "148,103,189", "140,86,75", "227,119,194"];
	var ac = [];
	var aL = function() {
		for (var j in highlight_groups) {
			if (j.match(/keyword_/)) {
				delete highlight_groups[j]
			}
		}
		for (var j in ac) {
			var t = ac[j];
			var a = color_list[j % color_list.length];
			var s = [];
			highlight_groups["keyword_" + t] = {
				ids: s,
				color: "rgba(" + a + ",1)"
			};
			for (var bF in node_items.nodes) {
				if (node_items.nodes[bF].text.indexOf(t) < 0) {
					continue
				}
				s.push(bF)
			}
		}
		aO();
		$("#word-cloud .word").each(function() {
			var i;
			if ((i = ac.indexOf(this.innerHTML)) != -1) {
				$(this).css("color", "rgb(" + color_list[i % color_list.length] + ")");
				$(this).addClass("selected")
			} else {
				$(this).css("color", "black");
				$(this).removeClass("selected")
			}
		});
		bE("keywords", {
			words: ac
		})
	};
	var aZ = function() {
		ac = [];
		aL()
	};
	do_select_keyword = function(s) {
		if (ac.indexOf(s) == -1) {
			ac.push(s)
		} else {
			var j = [];
			for (var a in ac) {
				if (ac[a] != s) {
					j.push(ac[a])
				}
			}
			ac = j
		}
		aL()
	};
	var bB = function(j) {
		var bO = {};
		ac = [];
		aL();
		if (j == undefined) {
			for (var t in node_items.nodes) {
				var bL = node_items.nodes[t];
				var bJ = bL.words ? bL.words.split(",") : [];
				for (var t in bJ) {
					if (bJ[t] == "" || bJ[t].length < 2) {
						continue
					}
					if (bO[bJ[t]] == undefined) {
						bO[bJ[t]] = []
					}
					bO[bJ[t]].push(bL.id)
				}
			}
		} else {
			for (var bH in j) {
				var bL = node_items.nodes[j[bH]];
				var bJ = bL.words ? bL.words.split(",") : [];
				for (var t in bJ) {
					if (bJ[t] == "" || bJ[t].length < 2) {
						continue
					}
					if (bO[bJ[t]] == undefined) {
						bO[bJ[t]] = []
					}
					bO[bJ[t]].push(bL.id)
				}
			}
		}
		var bN = [];
		for (var child_y_interval in bO) {
			bN.push(child_y_interval)
		}
		bN.sort(function(bP, i) {
			return bO[i].length - bO[bP].length
		});
		if (bN.length > 0) {
			var bK = "";
			var s = bO[bN[0]].length;
			var bG = bO[bN[bN.length >= 20 ? 19 : bN.length - 1]].length;
			for (var t in bN) {
				if (t >= 20) {
					break
				}
				var bF = bO[bN[t]].length;
				var bI = Math.sqrt((bF - bG) / (s - bG)) * 12 + 12;
				bK += '<span class="word" style="font-size:' + bI + 'px" onclick="do_select_keyword(this.innerHTML)">' + bN[t] + "</span>"
			}
			$("#word-cloud-words").html(bK)
		} else {
			$("#word-cloud-words").html("")
		}
	};
	$("#word-cloud .cancel").click(function() {
		ac = [];
		aL()
	});
	var a5 = [];
	$("#input-keyword-selection").keydown(function(a) {
		if (a.keyCode == 13 && this.value != "") {
			if (a5.indexOf(this.value) == -1) {
				a5.push(this.value);
				$("#word-cloud-mywords").append('<span class="word" style="font-size: 12px" onclick="do_select_keyword(this.innerHTML)">' + this.value + "</span>")
			}
			do_select_keyword(this.value);
			this.value = ""
		}
		a.stopPropagation()
	});
	bB();
	G_feed_keywords = function(s, j, t) {
		for (var a in s) {
			var bF = s[a];
			node_items.nodes[bF].emotion = j[a];
			node_items.nodes[bF].words = t[a].split(" ").map(function(i) {
				var bG = i.lastIndexOf("/");
				return i.substr(0, bG)
			}).join(",")
		}
		bB();
		set_emotion_color()
	};
	var B = false;
	var aN = function() {
		$("#compare-box").fadeIn("fast");
		B = true
	};
	var bz = function(a) {
		$("#compare-box").fadeOut("fast", a);
		B = false
	};
	var bh = [];
	var bn = function(t) {
		bh = t.ids;
		z = t.ids;
		ao = undefined;
		aJ = undefined;
		D = undefined;
		$("#compare-box .cb-question").hide();
		$("#cb-importance-question").show();
		var a = "";
		for (var j in t.ids) {
			var s = node_items.nodes[t.ids[j]];
			a += '<div class="tweet-holder">';
			a += '<div class="tweet tweet-' + s.id + '" onmouseover="set_hover_node(\'' + s.id + "');\" onclick=\"$('#compare-box .selections .tweet').removeClass('selected'); $(this).addClass('selected');\">";
			a += ' <div class="header">';
			a += '<span style="font-weight:bold;">' + s.username + '</span> <span style="font-family: Georgia; font-size: 12px;">' + $("#timeline")[0].format_date(new Date(s.t * 1000)) + "</span>";
			a += " </div>";
			a += ' <div class="contents">';
			a += "转发: " + s.children.length + "  粉丝: " + s.followers_count + "<br />" + s.text;
			a += " </div>";
			a += "</div>";
			a += "</div>"
		}
		$("#compare-box .selections").html(a);
		$("#compare-box .selections .rating").each(function() {
			pkuvis_rating_initialize(this, "attitude")
		});
		$("#compare-box .selections")[0].current_data = t;
		aN();
		render_interactive_scene()
	};
	var b = function(bF) {
		z = [];
		ao = undefined;
		D = bF.uid;
		aJ = undefined;
		bh = [];
		$("#compare-box .cb-question").hide();
		$("#cb-role-question").show();
		var a = w[bF.uid];
		var j = '<div class="tweets">';
		var bJ = 350 / M[bF.uid].length;
		if (bJ < 2) {
			bJ = 2
		}
		var t = [];
		for (var bG in M[bF.uid]) {
			var s = M[bF.uid][bG];
			t.push(s)
		}
		t.sort(function(bK, i) {
			return node_items.nodes[bK].t - node_items.nodes[i].t
		});
		for (var bG in t) {
			var s = t[bG];
			j += '<div style="width:' + bJ + 'px;" onmouseover="set_hover_node(\'' + s + "',true);\" ondblclick=\"do_select_tweet('" + s + "');\"></div>"
		}
		j += "</div>";
		$("#cb-role-question .person").html('<span class="user" ondblclick="do_select_user_nodes(\'' + bF.uid + "');\" onclick=\"set_highlight_user('" + bF.uid + "')\">" + a.screen_name + "</span><br />" + j + ' <span class="info">粉丝: ' + a.followers_count + ", 被转: " + a.reposts + ", 微博: " + a.nodes + "</span>");
		var bH = "";
		var bI = 0;
		for (var bG in bF.roles) {
			bH += '<span class="val-' + bG + '" onclick="$(this).toggleClass(\'active\');">' + bF.roles[bG] + "</span>";
			bI++;
			if (bI == 4 || bI == 7) {
				bH += "<br />"
			}
		}
		$("#cb-role-question .roles").html(bH);
		aN();
		render_interactive_scene()
	};
	var W = function(bF) {
		z = [bF.id];
		ao = undefined;
		D = undefined;
		aJ = undefined;
		bh = [];
		$("#compare-box .cb-question").hide();
		$("#cb-tweet-role-question").show();
		var j = "";
		var t = node_items.nodes[bF.id];
		j += '<div class="tweet-holder">';
		j += '<div class="tweet tweet-' + t.id + '" onmouseover="set_hover_node(\'' + t.id + "');\">";
		j += ' <div class="header">';
		j += '<span style="font-weight:bold;">' + t.username + '</span> <span style="font-family: Georgia; font-size: 12px;">' + $("#timeline")[0].format_date(new Date(t.t * 1000)) + "</span>";
		j += " </div>";
		j += ' <div class="contents">';
		j += "转发: " + t.children.length + "  粉丝: " + t.followers_count + "<br />" + t.text;
		j += " </div>";
		j += "</div>";
		j += "</div>";
		$("#cb-tweet-role-question .tweet-container").html(j);
		var j = "";
		var a = 0;
		for (var s in bF.roles) {
			j += '<span class="val-' + s + '" onclick="$(this).toggleClass(\'active\');">' + bF.roles[s] + "</span>";
			a++;
			if (a == 4 || a == 7) {
				j += "<br />"
			}
		}
		$("#cb-tweet-role-question .roles").html(j);
		aN();
		render_interactive_scene()
	};
	var ba = undefined;
	var bm = {};
	var af = function(a) {
		ba = a;
		bm.start = new Date().getTime() / 1000;
		$("#compare-submit-progress").html("");
		if (a.type == "importance") {
			bn(a)
		}
		if (a.type == "role") {
			b(a)
		}
		if (a.type == "tweet-role") {
			W(a)
		}
		if (G_userid != 0) {
			$.post("cs-submit.php", {
				query_score: G_userid
			}, function(t) {
				t = $.parseJSON(t);
				var bH = parseFloat(t.score);
				var j = t.coins;
				var bG = [
					[0, 30, "初级学员"],
					[30, 100, "中级学员"],
					[100, 200, "高级学员"],
					[200, 400, "实习侦探"],
					[400, 600, "助理侦探"],
					[600, 1000, "初级侦探"],
					[1000, 1500, "中级侦探"],
					[1500, 2500, "高级侦探"],
					[2500, 4000, "侦探专家"],
					[4000, 1e+100, "侦探之神"]
				];
				var bF = bH.toFixed(1);
				for (var s in bG) {
					if (bH >= bG[s][0] && bH < bG[s][1]) {
						bF = bH.toFixed(1) + "(" + bG[s][2] + ")"
					}
				}
				$("#compare-score").html(bF);
				$("#user-coins").html(j)
			})
		}
	};
	var bk = {
		retweet: [],
		followers: []
	};
	var a1 = {
		posts: [],
		followers: [],
		retweets: []
	};
	for (var aw in node_items.nodes) {
		bk.retweet.push(aw);
		bk.followers.push(aw)
	}
	for (var aw in w) {
		a1.posts.push(aw);
		a1.followers.push(aw);
		a1.retweets.push(aw)
	}
	bk.retweet.sort(function(i, a) {
		return node_items.nodes[a].children.length - node_items.nodes[i].children.length
	});
	bk.followers.sort(function(i, a) {
		return node_items.nodes[a].followers_count - node_items.nodes[i].followers_count
	});
	a1.posts.sort(function(i, a) {
		return w[a].nodes - w[i].nodes
	});
	a1.followers.sort(function(i, a) {
		return w[a].followers_count - w[i].followers_count
	});
	a1.retweets.sort(function(i, a) {
		return w[a].reposts - w[i].reposts
	});
	var am = function(j, bF, bG) {
		var t = [];
		for (var s in j) {
			t.push(s)
		}
		var bH = undefined;
		if (!bG) {
			bG = bF + "_rank";
			bH = function(i) {
				return i[bF]
			}
		} else {
			bH = bF
		}
		t.sort(function(bI, i) {
			return bH(j[i]) - bH(j[bI])
		});
		var a = 0;
		for (var s in t) {
			if (s > 0 && bH(j[t[s - 1]]) == bH(j[t[s]])) {
				j[t[s]][bG] = j[t[s - 1]][bG]
			} else {
				j[t[s]][bG] = s
			}
		}
		return j
	};
	am(node_items.nodes, "followers_count");
	am(node_items.nodes, function(a) {
		return a.children.length
	}, "retweets_rank");
	am(w, "followers_count");
	am(w, "nodes");
	am(w, "reposts");
	var bf = function(bG, t) {
		var a = [];
		var bJ = [];
		for (var i in bG) {
			var j = t(bG[i], i);
			if (j > 0) {
				a.push(i)
			}
		}
		var bF = 0;
		for (var i in a) {
			bJ[i] = bF;
			bF += t(bG[a[i]], a[i])
		}
		var bK = Math.random() * bF;
		var bH = 0,
			child_y_interval = a.length;
		while (bH < child_y_interval) {
			var bL = Math.floor((bH + child_y_interval) / 2);
			var s = bJ[bL];
			if (bK > s) {
				if (bH == bL) {
					break
				}
				bH = bL
			} else {
				child_y_interval = bL - 1
			}
		}
		return a[bH]
	};
	var aK = function() {
		if (!G_enable_task) {
			return
		}
		var j = [];
		for (var i in M) {
			j.push(i)
		}
		var bG = Math.random();
		if (bG < 0.1) {
			var bH = {
				type: "role",
				roles: {
					initiator: "发起者",
					transmitter: "传播者",
					"new-idea": "观点",
					"new-fact": "证据",
					opposition: "反对",
					neutral: "中立",
					support: "支持",
					quarrel: "争论",
					chat: "聊天",
					digress: "离题",
					"passer-by": "酱油"
				}
			};
			var t = Math.random();
			if (t < 1 / 3) {
				bH.uid = bf(w, function(i) {
					return Math.exp(-i.followers_count_rank / 20)
				})
			} else {
				if (t < 2 / 3) {
					bH.uid = bf(w, function(i) {
						return Math.exp(-i.nodes_rank / 20)
					})
				} else {
					bH.uid = bf(w, function(i) {
						return Math.exp(-i.reposts_rank / 20)
					})
				}
			}
			af(bH)
		} else {
			if (bG < 0.95) {
				var bH = {
					type: "tweet-role",
					roles: {
						initiator: "发起",
						transmitter: "传播",
						"new-idea": "观点",
						"new-fact": "证据",
						opposition: "反对",
						neutral: "中立",
						support: "支持",
						quarrel: "争论",
						chat: "聊天",
						digress: "离题",
						"passer-by": "酱油"
					}
				};
				var a = {};
				var bL = [];
				for (var bI = 0; bI < 50; bI++) {
					var s = bf(node_items.nodes, function(i) {
						return (i.children.length != 0 || i.followers_count > 10000) ? 1 : 0
					});
					a[s] = {
						count: 0
					};
					bL.push(s)
				}
				$.post("cs-submit.php", {
					query_statuses: bL.join(",")
				}, function(bP) {
					bP = $.parseJSON(bP);
					var bO = a[0],
						i = 1e+100;
					for (var bN in bP) {
						var bM = bP[bN];
						if (a[bM.status_id]) {
							a[bM.status_id].count = bM.status_labeling
						}
					}
					for (var bN in a) {
						if (a[bN].count < i) {
							bO = bN;
							i = a[bN].count
						}
					}
					bH.id = bO;
					af(bH)
				})
			} else {
				var bH = {
					type: "importance",
					ids: []
				};
				var t = Math.random();
				var bK, bJ;
				if (t < 1 / 2) {
					bK = bf(node_items.nodes, function(i) {
						return Math.exp(-i.followers_count_rank / 20)
					});
					var bF = node_items.nodes[bK].followers_count_rank;
					bJ = bf(node_items.nodes, function(i) {
						return Math.exp(-Math.pow(bF - i.followers_count_rank, 2) / 200)
					})
				} else {
					bK = bf(node_items.nodes, function(i) {
						return Math.exp(-i.retweets_rank / 20)
					});
					var bF = node_items.nodes[bK].retweets_rank;
					bJ = bK;
					while (bJ == bK) {
						bJ = bf(node_items.nodes, function(i) {
							if (i.id == bK) {
								return 0
							}
							return Math.exp(-Math.pow(bF - i.retweets_rank, 2) / 200)
						})
					}
				}
				bH.ids[0] = bK;
				bH.ids[1] = bJ;
				af(bH)
			}
		}
	};
	$("#compare-change-tweets").click(function() {
		bE("crowdsourcing-change", {
			question: ba
		});
		bz(function() {
			aK()
		})
	});
	$("#compare-close").click(function() {
		bz()
	});
	$("#btn-cstask").click(function() {
		if (B) {
			bz()
		} else {
			aN()
		}
	});
	$("#compare-submit").click(function() {
		if (ba == undefined) {
			return
		}
		var t = ba;
		var bH = function(i) {
			bm.end = new Date().getTime() / 1000;
			bm.duration = Math.round((bm.end - bm.start) * 10) / 10;
			if (bm.duration < 2) {
				alert("您回答得太快了吧。。。请认真回答 ^_^");
				return
			}
			i.duration = bm.duration;
			var bK = {
				event: G_zxcname,
				request: JSON.stringify(t),
				result: JSON.stringify(i),
				userinfo: JSON.stringify(G_userinfo)
			};
			$("#compare-submit-progress").html("...");
			bE("crowdsourcing-submit", {
				question: ba,
				result: i
			});
			$.post("cs-submit.php", bK, function(bL) {
				var bM = $.parseJSON(bL);
				if (bM.status == "success") {
					ba = undefined;
					bz(function() {
						aK()
					})
				}
			})
		};
		if (t.type == "importance") {
			var bI = $("#compare-box .selections .tweet.selected").attr("class");
			if (bI == undefined) {
				alert("请选择更重要的微博，然后标出作者态度，再进行提交。");
				return
			}
			var j;
			if (j = bI.match(/tweet-([0-9]+)/)) {
				var s = j[1];
				var bG = {};
				for (var bF in t.ids) {
					var a = t.ids[bF];
					bG[a] = {
						selected: false
					}
				}
				bG[s].selected = true;
				bH({
					nodes: bG
				})
			}
		}
		if (t.type == "role") {
			var bJ = [];
			$("#cb-role-question .roles > span").each(function() {
				var i = $(this).attr("class");
				var bK = i.match(/val-([0-9a-zA-Z\-]+)/)[1];
				var bL = i.match(/active/);
				if (bL) {
					bJ.push(bK)
				}
			});
			bH({
				roles: bJ
			})
		}
		if (t.type == "tweet-role") {
			var bJ = [];
			$("#cb-tweet-role-question .roles > span").each(function() {
				var i = $(this).attr("class");
				var bK = i.match(/val-([0-9a-zA-Z\-]+)/)[1];
				var bL = i.match(/active/);
				if (bL) {
					bJ.push(bK)
				}
			});
			bH({
				roles: bJ
			})
		}
	});
	var ad = true;
	(function() {
		var a;
		if (a = document.location.search.match(/record_id=([0-9]+)/)) {
			var i = a[1];
			$.post("ajax-submit.php", {
				action: "query",
				id: i
			}, function(j) {
				var s = $.parseJSON(j);
				C(s)
			});
			ad = false
		}
	})();
	ad = false;
	if (ad) {
		aK()
	}
};
var current_lang = "Chinese";
var i18n_langs = {
	English: {
		toolbar: ["中", "sail", "tree", "circle", "zoom", "pan", "zoom-in", "zoom-out", "restore", "reset", "show-all", "deselect", "X-Axis:", "linear", "nonlinear", "keywords", "help", "suggestions", "tasks"],
		i18n: {
			"node-size": "Node size",
			"node-size-scale": "scale",
			followers: "followers",
			retweets: "retweets",
			uniform: "uniform",
			posts: "posts",
			"submit-info": "Here is your result. Press the 'Submit' button to submit. Thanks for your contribution to our research.",
			"tweet-this": "Post data tweet of this image:",
			submit: "submit",
			cancel: "cancel",
			close: "close",
			share: "share",
			statistics: "statistics",
			filters: "Filters",
			userlist: "Users",
			meta: "Meta",
			"current-tweet": "Current Tweet",
			"do-repost": "retweet this",
			"share-weibo": "share to weibo",
			"text-length": "length",
			suggestions: "suggestions",
			paint: "paint"
		}
	},
	Chinese: {
		toolbar: ["En", "帆", "树", "环", "放大", "移动", "＋", "－", "前一视图", "复原", "多个", "取消选择", "横轴:", "线性", "伸缩", "关键词", "帮助", "提建议", "小任务"],
		i18n: {
			"node-size": "节点大小",
			"node-size-scale": "大小控制",
			followers: "粉丝数",
			retweets: "转发数",
			posts: "微博数",
			uniform: "统一",
			"submit-info": "下图是您做出的结果，请点击“提交”按钮发布到您的微博。谢谢您对我们的支持！",
			"tweet-this": "同时将本图片发表到您的微博:",
			submit: "提交",
			cancel: "取消",
			close: "关闭",
			share: "分享到我的微博",
			statistics: "足迹",
			filters: "微博过滤",
			userlist: "用户列表",
			meta: "分享/统计",
			"current-tweet": "选中的微博",
			"do-repost": "转发此微博",
			"share-weibo": "发表到我的微博",
			"text-length": "字数",
			suggestions: "提建议",
			paint: "添加标注",
			"expand-threshold": "展开阈值",
		}
	},
};
var switch_language = function(b) {
	var a = 0;
	var c = i18n_langs[b];
	if (c == undefined) {
		return
	}
	$("#toolbar .button, #toolbar .button-t, #control-box .button, #control-box .button-t").each(function() {
		if ($(this).attr("class").indexOf("skip") < 0) {
			$(this).html(c.toolbar[a++])
		}
	});
	a = 0;
	$(".i18n").each(function() {
		var d = $(this).attr("class");
		var e = d.match(/i18n\-([0-9a-z\-A-Z]+)/);
		if (e != null) {
			if (c.i18n[e[1]] == undefined) {
				console.log("i18n: " + e[1] + " undefined.")
			}
			$(this).html(c.i18n[e[1]])
		} else {
			console.log("i18n: " + d + " bad class.")
		}
	})
};
var toggle_language = function() {
	if (current_lang == "Chinese") {
		current_lang = "English"
	} else {
		current_lang = "Chinese"
	}
	switch_language(current_lang)
};
$(document).ready(function() {
	switch_language(current_lang);
	// (function() {
	// 	var c = $(window).height() - $("#rightlist-listpos").position().top - 64;
	// 	$("#user-lists").css("height", c + "px");
	// 	$("#current-tweet").css("height", c + "px");
	// 	$("#compare-box").css("right", ($(window).width() - $("#compare-box").width()) / 2 + "px");
	// 	$("#compare-box").css("bottom", ($(window).height() - $("#compare-box").height()) / 2 + "px")
	// })();
	var b = {
		"weibo-1.1": "传媒大学保安事件1",
		"weibo-1.2": "传媒大学保安事件2",
		"weibo-1.3": "传媒大学保安事件3",
		"weibo-1.4": "传媒大学保安事件4",
		"weibo-1.5": "传媒大学保安事件5",
		"weibo-1.6": "传媒大学保安事件6",
	
		"weibo-1.7": "传媒大学保安事件7",
		"weibo-6.1": "活熊取胆事件",
		"weibo-6.2": "归真堂的另一个水军博",
		"weibo-8.1": "关于ipad3发布",
		"weibo-9.1": "关于天价动车",
		"weibo-10.1": "南师大拍照抓逃课",
		"weibo-12.1": "大学宿舍的自动洗衣机",
		"weibo-13.1": "李开复：如何应对微薄危机",
		"weibo-14.1": "孙海峰vs方舟子1",
		"weibo-14.2": "孙海峰vs方舟子2",
		"weibo-23.1": "黄健翔：中国足球话题",
		"weibo-26.1": "数据化分析 动态气泡图",
		"weibo-27.1": "卖仙人掌的老大爷",
		"weibo-29.1": "研究生招考作弊案",
		"weibo-30.1": "曼城和曼联退出欧联杯",
		"weibo-31.1": "微活动与水军？华强北在线",
		"weibo-32.1": "三月飞雪中的首都机场",
		"weibo-33.1": "信息安全专业相关",
		"weibo-37.1": "传媒大学学生微薄约访姚晨",
		"weibo-37.2": "传媒大学学生微薄约访姚晨 结果"
	};
	if (b[G_zxcname]) {
		G_enable_task = true;
		// document.title = b[G_zxcname] + " - 微博可视分析";
		$("#submit-text").val("#北京大学PKUVIS微博可视分析工具# 我正在分析 “" + b[G_zxcname] + "”，你也来试试！http://vis.pku.edu.cn/weibova/weiboevents")
	} else {
		// document.title = "北京大学PKUVIS微博可视分析工具"
	}
	var a = G_zxcname.match(/ID-([0-9]+)/);
	if (a && a[1]) {
		WB_perform_crawl(a[1], function(f) {
			SYSTEM_INITIALIZE(f);
			var e = [];
			var d = [];
			for (var c in f) {
				e.push(f[c][11]);
				d.push(f[c][1])
			}
			$.ajax({
				url: "http://162.105.71.173/delegate/WeiboServlet/WordSplit",
				type: "post",
				data: {
					req: JSON.stringify({
						text: e
					})
				},
				crossDomain: true,
				timeout: 60000
			}).done(function(g) {
				G_feed_keywords(d, g.emotions, g.results)
			}).fail(function() {})
		}, function(d) {
			var c;
			if (d.failed) {
				c = "失败: ";
				if (d.failed == "rate") {
					c += "访问过于频繁，请一小时后再试"
				} else {
					if (d.failed == "root") {
						c += "无法获取原始微博，可能已被删除"
					} else {
						if (d.failed == "coins") {
							c += "金币不足"
						} else {
							c += "未知原因"
						}
					}
				}
			} else {
				c = "完成:" + d.action_finished + " 任务数:" + d.action_count + " 微博数:" + d.status_count + " 限制:" + d.rate_limit
			}
			$(".load-status-300").html(c)
		})
	} else {
		$(document).ready(function() {
			load_data(G_zxcname, SYSTEM_INITIALIZE)
		})
	}
});